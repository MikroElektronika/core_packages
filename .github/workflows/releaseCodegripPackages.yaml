name: Release Codegrip Packages Separately

on:
  workflow_dispatch:
    inputs:
      select_index:
        type: choice
        description: Index as test or live
        options:
          - Test
          - Live
      start_date:
        type: string
        description: First date for codegrip releases to release (better use csv, not spreadsheet to see the date)
        default: "2025-06-12"
      end_date:
        type: string
        description: Last date for codegrip releases (better use csv, not spreadsheet to see the date)
        default: "2025-06-13"
  schedule:
    - cron: "0 6 12-13 4 *" # 6:00 AM, 12th-13th of June

jobs:
  release-codegrip-packages:
    runs-on: ubuntu-latest
    steps:
      - name: Authorize Mikroe Actions App
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.MIKROE_ACTIONS }}
          private-key: ${{ secrets.MIKROE_ACTIONS_KEY_AUTHORIZE }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements/shared.txt
          sudo apt-get install p7zip-full

      - name: Update database for packaging
        run: |
          python -u scripts/reupload_databases.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} ${{ secrets.PROG_DEBUG_CODEGRIP_LIVE }} ${{ secrets.PROG_DEBUG_MIKROPROG }} "latest" "latest" ${{ github.event.inputs.select_index }} "--mcus_only" "False"

      - name: Add GitHub Actions credentials
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # TODO: Revert once ERP Database upload API is fixed
      # - name: Commit and Push Changes
      #   run: |
      #     if [[ ${{ github.event.inputs.select_index }} == "Live" ]]; then
      #       DB_NAME="necto_db.db"
      #     else
      #       DB_NAME="necto_db_dev.db"
      #     fi
      #     STATUS=$(git status --short "$DB_NAME")
      #     if [ -z "$STATUS" ]; then
      #       echo "No changes made to $DB_NAME";
      #     else
      #       echo "Updating with new $DB_NAME";
      #       echo "test"
      #       git pull
      #       git add $DB_NAME
      #       git commit -m "Updated $DB_NAME with latest merged release."
      #       git push
      #       if [[ ${{ github.event.inputs.select_index }} == "Live" ]]; then
      #         curl --location --request POST '${{ secrets.ERP_DB_IMPORT_API }}' \
      #         --header 'Authorization: Basic ${{ secrets.ERP_DB_IMPORT_KEY }}'
      #       fi
      #     fi

      - name: Commit and Push Changes
        run: |
          if [[ ${{ github.event.inputs.select_index }} == "Live" ]]; then
            DB_NAME="necto_db.db"
          else
            DB_NAME="necto_db_dev.db"
          fi
          STATUS=$(git status --short "$DB_NAME")
          if [ -z "$STATUS" ]; then
            echo "No changes made to $DB_NAME";
          else
            echo "Updating with new $DB_NAME";
            echo "test"
            git pull
            git add $DB_NAME
            git commit -m "Updated $DB_NAME with latest merged release."
            git push
          fi

      - name: Run Index Script
        env:
          ES_HOST: ${{ secrets.ES_HOST }}
          ES_USER: ${{ secrets.ES_USER }}
          ES_PASSWORD: ${{ secrets.ES_PASSWORD }}
        run: |
          if [[ ${{ github.event.inputs.select_index }} == "Test" ]]; then
            echo "Indexing to Test."
            python -u scripts/index_codegrip_packages.py ${{ secrets.ES_INDEX_TEST }} ${{ secrets.PROG_DEBUG_CODEGRIP_LIVE }} ${{ github.event.inputs.start_date }} ${{ github.event.inputs.end_date }} > message.txt
            else
            echo "Indexing to Live."
            python -u scripts/index_codegrip_packages.py ${{ secrets.ES_INDEX_LIVE }} ${{ secrets.PROG_DEBUG_CODEGRIP_LIVE }} ${{ github.event.inputs.start_date }} ${{ github.event.inputs.end_date }} > message.txt
          fi

      - name: Send notification to Mattermost - SDK Team
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL_SDK }}
        run: |
          cat message.txt
          MESSAGE=$(cat message.txt)
          curl -X POST -H 'Content-Type: application/json' \
          --data "{\"text\": \"$MESSAGE\"}" \
          $MATTERMOST_WEBHOOK_URL