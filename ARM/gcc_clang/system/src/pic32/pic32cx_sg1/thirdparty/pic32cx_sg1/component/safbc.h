/*
 * Component description for SAFBC
 *
 * Copyright (c) 2023 Microchip Technology Inc. and its subsidiaries.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* file generated from device description file (ATDF) version 2020-03-24T11:15:30Z */
#ifndef _0525SG12_SAFBC_COMPONENT_H_
#define _0525SG12_SAFBC_COMPONENT_H_

/* ************************************************************************** */
/*   SOFTWARE API DEFINITION FOR SAFBC                                        */
/* ************************************************************************** */

/* -------- SAFBC_START : (SAFBC Offset: 0x00) (R/W 32) This is Start00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */
#define SAFBC_START_RESETVALUE                _UINT32_(0x7FFF)                                     /*  (SAFBC_START) This is Start00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START_SAF_PROT_Pos              _UINT32_(0)                                          /* (SAFBC_START) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START_SAF_PROT_Msk              (_UINT32_(0xFFFFF) << SAFBC_START_SAF_PROT_Pos)      /* (SAFBC_START) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START_SAF_PROT(value)           (SAFBC_START_SAF_PROT_Msk & (_UINT32_(value) << SAFBC_START_SAF_PROT_Pos)) /* Assigment of value for SAF_PROT in the SAFBC_START register */
#define SAFBC_START_Msk                       _UINT32_(0x000FFFFF)                                 /* (SAFBC_START) Register Mask  */


/* -------- SAFBC_LIMIT : (SAFBC Offset: 0x04) (R/W 32) This is Limit00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */
#define SAFBC_LIMIT_RESETVALUE                _UINT32_(0x00)                                       /*  (SAFBC_LIMIT) This is Limit00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT_SAF_PROT_Pos              _UINT32_(0)                                          /* (SAFBC_LIMIT) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT_SAF_PROT_Msk              (_UINT32_(0xFFFFF) << SAFBC_LIMIT_SAF_PROT_Pos)      /* (SAFBC_LIMIT) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT_SAF_PROT(value)           (SAFBC_LIMIT_SAF_PROT_Msk & (_UINT32_(value) << SAFBC_LIMIT_SAF_PROT_Pos)) /* Assigment of value for SAF_PROT in the SAFBC_LIMIT register */
#define SAFBC_LIMIT_Msk                       _UINT32_(0x000FFFFF)                                 /* (SAFBC_LIMIT) Register Mask  */


/* -------- SAFBC_WRITE : (SAFBC Offset: 0x08) (R/W 32) This is Write00 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */
#define SAFBC_WRITE_RESETVALUE                _UINT32_(0x01)                                       /*  (SAFBC_WRITE) This is Write00 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE_SAF_PROT_WR0_Pos          _UINT32_(0)                                          /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE_SAF_PROT_WR0_Msk          (_UINT32_(0x1) << SAFBC_WRITE_SAF_PROT_WR0_Pos)      /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE_SAF_PROT_WR0(value)       (SAFBC_WRITE_SAF_PROT_WR0_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR0_Pos)) /* Assigment of value for SAF_PROT_WR0 in the SAFBC_WRITE register */
#define SAFBC_WRITE_SAF_PROT_WR1_Pos          _UINT32_(1)                                          /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE_SAF_PROT_WR1_Msk          (_UINT32_(0x1) << SAFBC_WRITE_SAF_PROT_WR1_Pos)      /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE_SAF_PROT_WR1(value)       (SAFBC_WRITE_SAF_PROT_WR1_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR1_Pos)) /* Assigment of value for SAF_PROT_WR1 in the SAFBC_WRITE register */
#define SAFBC_WRITE_SAF_PROT_WR2_Pos          _UINT32_(2)                                          /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE_SAF_PROT_WR2_Msk          (_UINT32_(0x1) << SAFBC_WRITE_SAF_PROT_WR2_Pos)      /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE_SAF_PROT_WR2(value)       (SAFBC_WRITE_SAF_PROT_WR2_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR2_Pos)) /* Assigment of value for SAF_PROT_WR2 in the SAFBC_WRITE register */
#define SAFBC_WRITE_SAF_PROT_WR3_Pos          _UINT32_(3)                                          /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE_SAF_PROT_WR3_Msk          (_UINT32_(0x1) << SAFBC_WRITE_SAF_PROT_WR3_Pos)      /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE_SAF_PROT_WR3(value)       (SAFBC_WRITE_SAF_PROT_WR3_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR3_Pos)) /* Assigment of value for SAF_PROT_WR3 in the SAFBC_WRITE register */
#define SAFBC_WRITE_SAF_PROT_WR4_Pos          _UINT32_(4)                                          /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE_SAF_PROT_WR4_Msk          (_UINT32_(0x1) << SAFBC_WRITE_SAF_PROT_WR4_Pos)      /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE_SAF_PROT_WR4(value)       (SAFBC_WRITE_SAF_PROT_WR4_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR4_Pos)) /* Assigment of value for SAF_PROT_WR4 in the SAFBC_WRITE register */
#define SAFBC_WRITE_SAF_PROT_WR5_Pos          _UINT32_(5)                                          /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE_SAF_PROT_WR5_Msk          (_UINT32_(0x1) << SAFBC_WRITE_SAF_PROT_WR5_Pos)      /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE_SAF_PROT_WR5(value)       (SAFBC_WRITE_SAF_PROT_WR5_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR5_Pos)) /* Assigment of value for SAF_PROT_WR5 in the SAFBC_WRITE register */
#define SAFBC_WRITE_SAF_PROT_WR6_Pos          _UINT32_(6)                                          /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE_SAF_PROT_WR6_Msk          (_UINT32_(0x1) << SAFBC_WRITE_SAF_PROT_WR6_Pos)      /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE_SAF_PROT_WR6(value)       (SAFBC_WRITE_SAF_PROT_WR6_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR6_Pos)) /* Assigment of value for SAF_PROT_WR6 in the SAFBC_WRITE register */
#define SAFBC_WRITE_SAF_PROT_WR7_Pos          _UINT32_(7)                                          /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE_SAF_PROT_WR7_Msk          (_UINT32_(0x1) << SAFBC_WRITE_SAF_PROT_WR7_Pos)      /* (SAFBC_WRITE) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE_SAF_PROT_WR7(value)       (SAFBC_WRITE_SAF_PROT_WR7_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR7_Pos)) /* Assigment of value for SAF_PROT_WR7 in the SAFBC_WRITE register */
#define SAFBC_WRITE_Msk                       _UINT32_(0x000000FF)                                 /* (SAFBC_WRITE) Register Mask  */

#define SAFBC_WRITE_SAF_PROT_WR_Pos           _UINT32_(0)                                          /* (SAFBC_WRITE Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE_SAF_PROT_WR_Msk           (_UINT32_(0xFF) << SAFBC_WRITE_SAF_PROT_WR_Pos)      /* (SAFBC_WRITE Mask) SAF_PROT_WR */
#define SAFBC_WRITE_SAF_PROT_WR(value)        (SAFBC_WRITE_SAF_PROT_WR_Msk & (_UINT32_(value) << SAFBC_WRITE_SAF_PROT_WR_Pos)) 

/* -------- SAFBC_READ : (SAFBC Offset: 0x0C) (R/W 32) This is Read00 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */
#define SAFBC_READ_RESETVALUE                 _UINT32_(0x01)                                       /*  (SAFBC_READ) This is Read00 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ_SAF_PROT_RD0_Pos           _UINT32_(0)                                          /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ_SAF_PROT_RD0_Msk           (_UINT32_(0x1) << SAFBC_READ_SAF_PROT_RD0_Pos)       /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ_SAF_PROT_RD0(value)        (SAFBC_READ_SAF_PROT_RD0_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD0_Pos)) /* Assigment of value for SAF_PROT_RD0 in the SAFBC_READ register */
#define SAFBC_READ_SAF_PROT_RD1_Pos           _UINT32_(1)                                          /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ_SAF_PROT_RD1_Msk           (_UINT32_(0x1) << SAFBC_READ_SAF_PROT_RD1_Pos)       /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ_SAF_PROT_RD1(value)        (SAFBC_READ_SAF_PROT_RD1_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD1_Pos)) /* Assigment of value for SAF_PROT_RD1 in the SAFBC_READ register */
#define SAFBC_READ_SAF_PROT_RD2_Pos           _UINT32_(2)                                          /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ_SAF_PROT_RD2_Msk           (_UINT32_(0x1) << SAFBC_READ_SAF_PROT_RD2_Pos)       /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ_SAF_PROT_RD2(value)        (SAFBC_READ_SAF_PROT_RD2_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD2_Pos)) /* Assigment of value for SAF_PROT_RD2 in the SAFBC_READ register */
#define SAFBC_READ_SAF_PROT_RD3_Pos           _UINT32_(3)                                          /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ_SAF_PROT_RD3_Msk           (_UINT32_(0x1) << SAFBC_READ_SAF_PROT_RD3_Pos)       /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ_SAF_PROT_RD3(value)        (SAFBC_READ_SAF_PROT_RD3_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD3_Pos)) /* Assigment of value for SAF_PROT_RD3 in the SAFBC_READ register */
#define SAFBC_READ_SAF_PROT_RD4_Pos           _UINT32_(4)                                          /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ_SAF_PROT_RD4_Msk           (_UINT32_(0x1) << SAFBC_READ_SAF_PROT_RD4_Pos)       /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ_SAF_PROT_RD4(value)        (SAFBC_READ_SAF_PROT_RD4_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD4_Pos)) /* Assigment of value for SAF_PROT_RD4 in the SAFBC_READ register */
#define SAFBC_READ_SAF_PROT_RD5_Pos           _UINT32_(5)                                          /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ_SAF_PROT_RD5_Msk           (_UINT32_(0x1) << SAFBC_READ_SAF_PROT_RD5_Pos)       /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ_SAF_PROT_RD5(value)        (SAFBC_READ_SAF_PROT_RD5_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD5_Pos)) /* Assigment of value for SAF_PROT_RD5 in the SAFBC_READ register */
#define SAFBC_READ_SAF_PROT_RD6_Pos           _UINT32_(6)                                          /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ_SAF_PROT_RD6_Msk           (_UINT32_(0x1) << SAFBC_READ_SAF_PROT_RD6_Pos)       /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ_SAF_PROT_RD6(value)        (SAFBC_READ_SAF_PROT_RD6_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD6_Pos)) /* Assigment of value for SAF_PROT_RD6 in the SAFBC_READ register */
#define SAFBC_READ_SAF_PROT_RD7_Pos           _UINT32_(7)                                          /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ_SAF_PROT_RD7_Msk           (_UINT32_(0x1) << SAFBC_READ_SAF_PROT_RD7_Pos)       /* (SAFBC_READ) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ_SAF_PROT_RD7(value)        (SAFBC_READ_SAF_PROT_RD7_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD7_Pos)) /* Assigment of value for SAF_PROT_RD7 in the SAFBC_READ register */
#define SAFBC_READ_Msk                        _UINT32_(0x000000FF)                                 /* (SAFBC_READ) Register Mask  */

#define SAFBC_READ_SAF_PROT_RD_Pos            _UINT32_(0)                                          /* (SAFBC_READ Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ_SAF_PROT_RD_Msk            (_UINT32_(0xFF) << SAFBC_READ_SAF_PROT_RD_Pos)       /* (SAFBC_READ Mask) SAF_PROT_RD */
#define SAFBC_READ_SAF_PROT_RD(value)         (SAFBC_READ_SAF_PROT_RD_Msk & (_UINT32_(value) << SAFBC_READ_SAF_PROT_RD_Pos)) 

/* -------- SAFBC_ECP_CMD : (SAFBC Offset: 0x18) (R/W 32) This register defines the command type and length of transfers requested by EC firmware -------- */
#define SAFBC_ECP_CMD_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_ECP_CMD) This register defines the command type and length of transfers requested by EC firmware  Reset Value */

#define SAFBC_ECP_CMD_EC_PUT_CMD_Pos          _UINT32_(0)                                          /* (SAFBC_ECP_CMD) This field must contain the value 0Ah; that is, the eSPI command                       PUT_FLASH_NP. Position */
#define SAFBC_ECP_CMD_EC_PUT_CMD_Msk          (_UINT32_(0xFF) << SAFBC_ECP_CMD_EC_PUT_CMD_Pos)     /* (SAFBC_ECP_CMD) This field must contain the value 0Ah; that is, the eSPI command                       PUT_FLASH_NP. Mask */
#define SAFBC_ECP_CMD_EC_PUT_CMD(value)       (SAFBC_ECP_CMD_EC_PUT_CMD_Msk & (_UINT32_(value) << SAFBC_ECP_CMD_EC_PUT_CMD_Pos)) /* Assigment of value for EC_PUT_CMD in the SAFBC_ECP_CMD register */
#define SAFBC_ECP_CMD_EC_CTYPE_CMD_Pos        _UINT32_(8)                                          /* (SAFBC_ECP_CMD) This field encodes the operation requested:                       00h = Read                       01h = Write (Page Program)                       02h = Erase                       Other encodings are undefined Position */
#define SAFBC_ECP_CMD_EC_CTYPE_CMD_Msk        (_UINT32_(0xFF) << SAFBC_ECP_CMD_EC_CTYPE_CMD_Pos)   /* (SAFBC_ECP_CMD) This field encodes the operation requested:                       00h = Read                       01h = Write (Page Program)                       02h = Erase                       Other encodings are undefined Mask */
#define SAFBC_ECP_CMD_EC_CTYPE_CMD(value)     (SAFBC_ECP_CMD_EC_CTYPE_CMD_Msk & (_UINT32_(value) << SAFBC_ECP_CMD_EC_CTYPE_CMD_Pos)) /* Assigment of value for EC_CTYPE_CMD in the SAFBC_ECP_CMD register */
#define SAFBC_ECP_CMD_EC_LEN_Pos              _UINT32_(24)                                         /* (SAFBC_ECP_CMD) This field contains the Length field for all requests.                       Read or Write: The length in bytes of the data transfer, to or from                       the SRAM buffer. Must be in the range 1 -- 64 (01h -- 40h).                       Erase: Must encode an eSPI-defined Erase Block Size:                       00h = 4K                       01h = 32K                       02h = 64K                       Other encodings are undefined. Position */
#define SAFBC_ECP_CMD_EC_LEN_Msk              (_UINT32_(0xFF) << SAFBC_ECP_CMD_EC_LEN_Pos)         /* (SAFBC_ECP_CMD) This field contains the Length field for all requests.                       Read or Write: The length in bytes of the data transfer, to or from                       the SRAM buffer. Must be in the range 1 -- 64 (01h -- 40h).                       Erase: Must encode an eSPI-defined Erase Block Size:                       00h = 4K                       01h = 32K                       02h = 64K                       Other encodings are undefined. Mask */
#define SAFBC_ECP_CMD_EC_LEN(value)           (SAFBC_ECP_CMD_EC_LEN_Msk & (_UINT32_(value) << SAFBC_ECP_CMD_EC_LEN_Pos)) /* Assigment of value for EC_LEN in the SAFBC_ECP_CMD register */
#define SAFBC_ECP_CMD_Msk                     _UINT32_(0xFF00FFFF)                                 /* (SAFBC_ECP_CMD) Register Mask  */


/* -------- SAFBC_ECP_FLASH_ADDR : (SAFBC Offset: 0x1C) (R/W 32) This register hold the Flash Space address to be accessed by the current command from EC firmware. -------- */
#define SAFBC_ECP_FLASH_ADDR_RESETVALUE       _UINT32_(0x00)                                       /*  (SAFBC_ECP_FLASH_ADDR) This register hold the Flash Space address to be accessed by the current command from EC firmware.  Reset Value */

#define SAFBC_ECP_FLASH_ADDR_ADDR_Pos         _UINT32_(0)                                          /* (SAFBC_ECP_FLASH_ADDR) FLASH_ADDR: This field holds the Flash address to be accessed. Position */
#define SAFBC_ECP_FLASH_ADDR_ADDR_Msk         (_UINT32_(0xFFFFFFFF) << SAFBC_ECP_FLASH_ADDR_ADDR_Pos) /* (SAFBC_ECP_FLASH_ADDR) FLASH_ADDR: This field holds the Flash address to be accessed. Mask */
#define SAFBC_ECP_FLASH_ADDR_ADDR(value)      (SAFBC_ECP_FLASH_ADDR_ADDR_Msk & (_UINT32_(value) << SAFBC_ECP_FLASH_ADDR_ADDR_Pos)) /* Assigment of value for ADDR in the SAFBC_ECP_FLASH_ADDR register */
#define SAFBC_ECP_FLASH_ADDR_Msk              _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_ECP_FLASH_ADDR) Register Mask  */


/* -------- SAFBC_ECP_START : (SAFBC Offset: 0x20) (R/W 32) This register contains the Start control for a Flash access requested in the rest of the EC    Portal registers. It triggers the requested transfer. -------- */
#define SAFBC_ECP_START_RESETVALUE            _UINT32_(0x00)                                       /*  (SAFBC_ECP_START) This register contains the Start control for a Flash access requested in the rest of the EC    Portal registers. It triggers the requested transfer.  Reset Value */

#define SAFBC_ECP_START_START_Pos             _UINT32_(0)                                          /* (SAFBC_ECP_START) This bit is written with '1' to start a new request, but always appears                   '0' when being read. Writing '1' to this bit immediately sets the                   EC_BUSY bit to '1' as an acknowledgement that the request is being serviced.                   Writing '1' to the START bit again, while the EC_BUSY bit is                   already '1' will do nothing except to set the START_OVERFLOW                   error status bit to '1' and the request already in service will complete                   normally except for the START_OVERFLOW=1 status indication. Position */
#define SAFBC_ECP_START_START_Msk             (_UINT32_(0x1) << SAFBC_ECP_START_START_Pos)         /* (SAFBC_ECP_START) This bit is written with '1' to start a new request, but always appears                   '0' when being read. Writing '1' to this bit immediately sets the                   EC_BUSY bit to '1' as an acknowledgement that the request is being serviced.                   Writing '1' to the START bit again, while the EC_BUSY bit is                   already '1' will do nothing except to set the START_OVERFLOW                   error status bit to '1' and the request already in service will complete                   normally except for the START_OVERFLOW=1 status indication. Mask */
#define SAFBC_ECP_START_START(value)          (SAFBC_ECP_START_START_Msk & (_UINT32_(value) << SAFBC_ECP_START_START_Pos)) /* Assigment of value for START in the SAFBC_ECP_START register */
#define SAFBC_ECP_START_Msk                   _UINT32_(0x00000001)                                 /* (SAFBC_ECP_START) Register Mask  */


/* -------- SAFBC_ECP_BUF_ADDR : (SAFBC Offset: 0x24) (R/W 32) This register holds a location in the EC's own address space that is to be used as     the SRAM buffer for an EC Flash access. -------- */
#define SAFBC_ECP_BUF_ADDR_RESETVALUE         _UINT32_(0x00)                                       /*  (SAFBC_ECP_BUF_ADDR) This register holds a location in the EC's own address space that is to be used as     the SRAM buffer for an EC Flash access.  Reset Value */

#define SAFBC_ECP_BUF_ADDR_ADR_Pos            _UINT32_(2)                                          /* (SAFBC_ECP_BUF_ADDR) This field holds bits [31:2] of the SRAM buffer address.                   Bits[1:0] of the address are fixed at 00. Position */
#define SAFBC_ECP_BUF_ADDR_ADR_Msk            (_UINT32_(0x3FFFFFFF) << SAFBC_ECP_BUF_ADDR_ADR_Pos) /* (SAFBC_ECP_BUF_ADDR) This field holds bits [31:2] of the SRAM buffer address.                   Bits[1:0] of the address are fixed at 00. Mask */
#define SAFBC_ECP_BUF_ADDR_ADR(value)         (SAFBC_ECP_BUF_ADDR_ADR_Msk & (_UINT32_(value) << SAFBC_ECP_BUF_ADDR_ADR_Pos)) /* Assigment of value for ADR in the SAFBC_ECP_BUF_ADDR register */
#define SAFBC_ECP_BUF_ADDR_Msk                _UINT32_(0xFFFFFFFC)                                 /* (SAFBC_ECP_BUF_ADDR) Register Mask  */


/* -------- SAFBC_ECP_STS : (SAFBC Offset: 0x28) (R/W 32) This register holds the DONE status bit, which indicates when a request is completed     by rising to '1'. It may be used as an interrupt trigger for INTR_FLASH. It may be cleared     at any time after it rises, but must be cleared before issuing the next request. -------- */
#define SAFBC_ECP_STS_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_ECP_STS) This register holds the DONE status bit, which indicates when a request is completed     by rising to '1'. It may be used as an interrupt trigger for INTR_FLASH. It may be cleared     at any time after it rises, but must be cleared before issuing the next request.  Reset Value */

#define SAFBC_ECP_STS_DONE_Pos                _UINT32_(0)                                          /* (SAFBC_ECP_STS) This bit is set to '1' by hardware to indicate the end of a requested access by the EC.        It can be enabled to trigger an interrupt when '1'. Writing a '1' clears this bit and the interrupt source.        This is R/WC. Position */
#define SAFBC_ECP_STS_DONE_Msk                (_UINT32_(0x1) << SAFBC_ECP_STS_DONE_Pos)            /* (SAFBC_ECP_STS) This bit is set to '1' by hardware to indicate the end of a requested access by the EC.        It can be enabled to trigger an interrupt when '1'. Writing a '1' clears this bit and the interrupt source.        This is R/WC. Mask */
#define SAFBC_ECP_STS_DONE(value)             (SAFBC_ECP_STS_DONE_Msk & (_UINT32_(value) << SAFBC_ECP_STS_DONE_Pos)) /* Assigment of value for DONE in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_DONE_TST_Pos            _UINT32_(1)                                          /* (SAFBC_ECP_STS) This bit is set to '1' by hardware during a requested access by the EC. It has no usage        except for possible diagnostic purposes, but should be cleared (with the rest of this register)         by writing '1' before starting any new access.        This is R/WC. Position */
#define SAFBC_ECP_STS_DONE_TST_Msk            (_UINT32_(0x1) << SAFBC_ECP_STS_DONE_TST_Pos)        /* (SAFBC_ECP_STS) This bit is set to '1' by hardware during a requested access by the EC. It has no usage        except for possible diagnostic purposes, but should be cleared (with the rest of this register)         by writing '1' before starting any new access.        This is R/WC. Mask */
#define SAFBC_ECP_STS_DONE_TST(value)         (SAFBC_ECP_STS_DONE_TST_Msk & (_UINT32_(value) << SAFBC_ECP_STS_DONE_TST_Pos)) /* Assigment of value for DONE_TST in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_TIMEOUT_Pos             _UINT32_(2)                                          /* (SAFBC_ECP_STS) This bit indicates that an Erase or Write request from the EC has failed because the Flash        has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ECP_STS_TIMEOUT_Msk             (_UINT32_(0x1) << SAFBC_ECP_STS_TIMEOUT_Pos)         /* (SAFBC_ECP_STS) This bit indicates that an Erase or Write request from the EC has failed because the Flash        has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ECP_STS_TIMEOUT(value)          (SAFBC_ECP_STS_TIMEOUT_Msk & (_UINT32_(value) << SAFBC_ECP_STS_TIMEOUT_Pos)) /* Assigment of value for TIMEOUT in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_OUT_OF_RANGE_Pos        _UINT32_(3)                                          /* (SAFBC_ECP_STS) This bit indicates that a request from the EC has been rejected because it is beyond the        physical limits of the attached Flash devices, as declared in the Size Limit and Threshold        Registers. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ECP_STS_OUT_OF_RANGE_Msk        (_UINT32_(0x1) << SAFBC_ECP_STS_OUT_OF_RANGE_Pos)    /* (SAFBC_ECP_STS) This bit indicates that a request from the EC has been rejected because it is beyond the        physical limits of the attached Flash devices, as declared in the Size Limit and Threshold        Registers. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ECP_STS_OUT_OF_RANGE(value)     (SAFBC_ECP_STS_OUT_OF_RANGE_Msk & (_UINT32_(value) << SAFBC_ECP_STS_OUT_OF_RANGE_Pos)) /* Assigment of value for OUT_OF_RANGE in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_ACCESS_VIOLAT_Pos       _UINT32_(4)                                          /* (SAFBC_ECP_STS) This bit indicates that a request from the EC has been rejected because it violates the        Protection Register settings. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ECP_STS_ACCESS_VIOLAT_Msk       (_UINT32_(0x1) << SAFBC_ECP_STS_ACCESS_VIOLAT_Pos)   /* (SAFBC_ECP_STS) This bit indicates that a request from the EC has been rejected because it violates the        Protection Register settings. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ECP_STS_ACCESS_VIOLAT(value)    (SAFBC_ECP_STS_ACCESS_VIOLAT_Msk & (_UINT32_(value) << SAFBC_ECP_STS_ACCESS_VIOLAT_Pos)) /* Assigment of value for ACCESS_VIOLAT in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_BOUND_4K_Pos            _UINT32_(5)                                          /* (SAFBC_ECP_STS) This bit indicates that a Read request from the EC has been rejected because it has attempted         to cross a 4K Flash address boundary. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ECP_STS_BOUND_4K_Msk            (_UINT32_(0x1) << SAFBC_ECP_STS_BOUND_4K_Pos)        /* (SAFBC_ECP_STS) This bit indicates that a Read request from the EC has been rejected because it has attempted         to cross a 4K Flash address boundary. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ECP_STS_BOUND_4K(value)         (SAFBC_ECP_STS_BOUND_4K_Msk & (_UINT32_(value) << SAFBC_ECP_STS_BOUND_4K_Pos)) /* Assigment of value for BOUND_4K in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_ERASE_SIZE_Pos          _UINT32_(6)                                          /* (SAFBC_ECP_STS) This bit indicates that an invalid Erase Block Size has been specified in an Erase request        from the EC. This error is detected by seeing 00h in the specific Erase Size opcode field. This         bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ECP_STS_ERASE_SIZE_Msk          (_UINT32_(0x1) << SAFBC_ECP_STS_ERASE_SIZE_Pos)      /* (SAFBC_ECP_STS) This bit indicates that an invalid Erase Block Size has been specified in an Erase request        from the EC. This error is detected by seeing 00h in the specific Erase Size opcode field. This         bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ECP_STS_ERASE_SIZE(value)       (SAFBC_ECP_STS_ERASE_SIZE_Msk & (_UINT32_(value) << SAFBC_ECP_STS_ERASE_SIZE_Pos)) /* Assigment of value for ERASE_SIZE in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_STRT_OVRFLW_Pos         _UINT32_(7)                                          /* (SAFBC_ECP_STS) This bit indicates that an access was already in progress when a new access was        requested by writing '1' to the START bit. Such a request is ignored except to set this bit.        This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ECP_STS_STRT_OVRFLW_Msk         (_UINT32_(0x1) << SAFBC_ECP_STS_STRT_OVRFLW_Pos)     /* (SAFBC_ECP_STS) This bit indicates that an access was already in progress when a new access was        requested by writing '1' to the START bit. Such a request is ignored except to set this bit.        This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ECP_STS_STRT_OVRFLW(value)      (SAFBC_ECP_STS_STRT_OVRFLW_Msk & (_UINT32_(value) << SAFBC_ECP_STS_STRT_OVRFLW_Pos)) /* Assigment of value for STRT_OVRFLW in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_BAD_REQ_Pos             _UINT32_(8)                                          /* (SAFBC_ECP_STS) This bit indicates that an invalid Request code has been specified in the Portal        Command Register at the time the START bit was set to trigger it.        This bit is cleared by writing '1' to its position.         This is R/WC. Position */
#define SAFBC_ECP_STS_BAD_REQ_Msk             (_UINT32_(0x1) << SAFBC_ECP_STS_BAD_REQ_Pos)         /* (SAFBC_ECP_STS) This bit indicates that an invalid Request code has been specified in the Portal        Command Register at the time the START bit was set to trigger it.        This bit is cleared by writing '1' to its position.         This is R/WC. Mask */
#define SAFBC_ECP_STS_BAD_REQ(value)          (SAFBC_ECP_STS_BAD_REQ_Msk & (_UINT32_(value) << SAFBC_ECP_STS_BAD_REQ_Pos)) /* Assigment of value for BAD_REQ in the SAFBC_ECP_STS register */
#define SAFBC_ECP_STS_Msk                     _UINT32_(0x000001FF)                                 /* (SAFBC_ECP_STS) Register Mask  */


/* -------- SAFBC_ECP_IEN : (SAFBC Offset: 0x2C) (R/W 32) This register contains the one bit DONE_EN in bit position[0]. This bit enables the DONE bit in     the status register to trigger an interrupt. -------- */
#define SAFBC_ECP_IEN_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_ECP_IEN) This register contains the one bit DONE_EN in bit position[0]. This bit enables the DONE bit in     the status register to trigger an interrupt.  Reset Value */

#define SAFBC_ECP_IEN_DONE_EN_Pos             _UINT32_(0)                                          /* (SAFBC_ECP_IEN) This bit enables interrupts from the DONE bit in the Status register.         1 = Enabled         0 = Disabled Position */
#define SAFBC_ECP_IEN_DONE_EN_Msk             (_UINT32_(0x1) << SAFBC_ECP_IEN_DONE_EN_Pos)         /* (SAFBC_ECP_IEN) This bit enables interrupts from the DONE bit in the Status register.         1 = Enabled         0 = Disabled Mask */
#define SAFBC_ECP_IEN_DONE_EN(value)          (SAFBC_ECP_IEN_DONE_EN_Msk & (_UINT32_(value) << SAFBC_ECP_IEN_DONE_EN_Pos)) /* Assigment of value for DONE_EN in the SAFBC_ECP_IEN register */
#define SAFBC_ECP_IEN_Msk                     _UINT32_(0x00000001)                                 /* (SAFBC_ECP_IEN) Register Mask  */


/* -------- SAFBC_FLASH_SIZE_LIM : (SAFBC Offset: 0x30) (R/W 32) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. -------- */
#define SAFBC_FLASH_SIZE_LIM_RESETVALUE       _UINT32_(0x00)                                       /*  (SAFBC_FLASH_SIZE_LIM) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices.  Reset Value */

#define SAFBC_FLASH_SIZE_LIM_LIMIT_Pos        _UINT32_(0)                                          /* (SAFBC_FLASH_SIZE_LIM) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. Position */
#define SAFBC_FLASH_SIZE_LIM_LIMIT_Msk        (_UINT32_(0xFFFFFFFF) << SAFBC_FLASH_SIZE_LIM_LIMIT_Pos) /* (SAFBC_FLASH_SIZE_LIM) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. Mask */
#define SAFBC_FLASH_SIZE_LIM_LIMIT(value)     (SAFBC_FLASH_SIZE_LIM_LIMIT_Msk & (_UINT32_(value) << SAFBC_FLASH_SIZE_LIM_LIMIT_Pos)) /* Assigment of value for LIMIT in the SAFBC_FLASH_SIZE_LIM register */
#define SAFBC_FLASH_SIZE_LIM_Msk              _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_FLASH_SIZE_LIM) Register Mask  */


/* -------- SAFBC_FLASH_THR : (SAFBC Offset: 0x34) (R/W 32) This register declares whether there are two Flash devices, and if so, where the boundary is     between the devices. -------- */
#define SAFBC_FLASH_THR_RESETVALUE            _UINT32_(0x00)                                       /*  (SAFBC_FLASH_THR) This register declares whether there are two Flash devices, and if so, where the boundary is     between the devices.  Reset Value */

#define SAFBC_FLASH_THR_THRES_Pos             _UINT32_(0)                                          /* (SAFBC_FLASH_THR) The address placed in this register is the address of the first byte of the second Flash         device. If there is only one Flash device, then this register must contain a value greater than         the Size Limit register above. Position */
#define SAFBC_FLASH_THR_THRES_Msk             (_UINT32_(0xFFFFFFFF) << SAFBC_FLASH_THR_THRES_Pos)  /* (SAFBC_FLASH_THR) The address placed in this register is the address of the first byte of the second Flash         device. If there is only one Flash device, then this register must contain a value greater than         the Size Limit register above. Mask */
#define SAFBC_FLASH_THR_THRES(value)          (SAFBC_FLASH_THR_THRES_Msk & (_UINT32_(value) << SAFBC_FLASH_THR_THRES_Pos)) /* Assigment of value for THRES in the SAFBC_FLASH_THR register */
#define SAFBC_FLASH_THR_Msk                   _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_FLASH_THR) Register Mask  */


/* -------- SAFBC_FLASH_MISC_CFG : (SAFBC Offset: 0x38) (R/W 32) Bits[7:6] (PREFIX) declare the need for some Flash devices (notably Micron) to be given an     explicit command to enter Continuous Mode, as opposed to requiring only Mode bits in the first     Read access. -------- */
#define SAFBC_FLASH_MISC_CFG_RESETVALUE       _UINT32_(0x00)                                       /*  (SAFBC_FLASH_MISC_CFG) Bits[7:6] (PREFIX) declare the need for some Flash devices (notably Micron) to be given an     explicit command to enter Continuous Mode, as opposed to requiring only Mode bits in the first     Read access.  Reset Value */

#define SAFBC_FLASH_MISC_CFG_PREFETCH_OPT_EN_Pos _UINT32_(0)                                          /* (SAFBC_FLASH_MISC_CFG) Selects optimized data prefetching from the Flash devices to the eSPI Master. This field has no        effect unless the PREFETCH_EN bit is also '1'         00= Prefetched data from Flash is delivered using canonical eSPI methods. (Default)        11= Prefetched data from Flash is delivered using expedited eSPI methods.        01,10= (Reserved) Position */
#define SAFBC_FLASH_MISC_CFG_PREFETCH_OPT_EN_Msk (_UINT32_(0x3) << SAFBC_FLASH_MISC_CFG_PREFETCH_OPT_EN_Pos) /* (SAFBC_FLASH_MISC_CFG) Selects optimized data prefetching from the Flash devices to the eSPI Master. This field has no        effect unless the PREFETCH_EN bit is also '1'         00= Prefetched data from Flash is delivered using canonical eSPI methods. (Default)        11= Prefetched data from Flash is delivered using expedited eSPI methods.        01,10= (Reserved) Mask */
#define SAFBC_FLASH_MISC_CFG_PREFETCH_OPT_EN(value) (SAFBC_FLASH_MISC_CFG_PREFETCH_OPT_EN_Msk & (_UINT32_(value) << SAFBC_FLASH_MISC_CFG_PREFETCH_OPT_EN_Pos)) /* Assigment of value for PREFETCH_OPT_EN in the SAFBC_FLASH_MISC_CFG register */
#define SAFBC_FLASH_MISC_CFG_CS0_4BYTE_ADDR_MODE_Pos _UINT32_(4)                                          /* (SAFBC_FLASH_MISC_CFG) Declares whether the Flash device on CS0# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS0# Flash device.         1=Issue 4-byte addresses to the CS0# Flash device. Position */
#define SAFBC_FLASH_MISC_CFG_CS0_4BYTE_ADDR_MODE_Msk (_UINT32_(0x1) << SAFBC_FLASH_MISC_CFG_CS0_4BYTE_ADDR_MODE_Pos) /* (SAFBC_FLASH_MISC_CFG) Declares whether the Flash device on CS0# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS0# Flash device.         1=Issue 4-byte addresses to the CS0# Flash device. Mask */
#define SAFBC_FLASH_MISC_CFG_CS0_4BYTE_ADDR_MODE(value) (SAFBC_FLASH_MISC_CFG_CS0_4BYTE_ADDR_MODE_Msk & (_UINT32_(value) << SAFBC_FLASH_MISC_CFG_CS0_4BYTE_ADDR_MODE_Pos)) /* Assigment of value for CS0_4BYTE_ADDR_MODE in the SAFBC_FLASH_MISC_CFG register */
#define SAFBC_FLASH_MISC_CFG_CS1_4BYTE_ADDR_MODE_Pos _UINT32_(5)                                          /* (SAFBC_FLASH_MISC_CFG) Declares whether the Flash device on CS1# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS1# Flash device.         1=Issue 4-byte addresses to the CS1# Flash device. Position */
#define SAFBC_FLASH_MISC_CFG_CS1_4BYTE_ADDR_MODE_Msk (_UINT32_(0x1) << SAFBC_FLASH_MISC_CFG_CS1_4BYTE_ADDR_MODE_Pos) /* (SAFBC_FLASH_MISC_CFG) Declares whether the Flash device on CS1# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS1# Flash device.         1=Issue 4-byte addresses to the CS1# Flash device. Mask */
#define SAFBC_FLASH_MISC_CFG_CS1_4BYTE_ADDR_MODE(value) (SAFBC_FLASH_MISC_CFG_CS1_4BYTE_ADDR_MODE_Msk & (_UINT32_(value) << SAFBC_FLASH_MISC_CFG_CS1_4BYTE_ADDR_MODE_Pos)) /* Assigment of value for CS1_4BYTE_ADDR_MODE in the SAFBC_FLASH_MISC_CFG register */
#define SAFBC_FLASH_MISC_CFG_CS0_CONT_PREFIX_EN_Pos _UINT32_(6)                                          /* (SAFBC_FLASH_MISC_CFG) Declares whether the Flash device on CS0# requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS0#.         1=A Prefix command will be issued from the CS0 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS0# before entry into Continuous Mode. Position */
#define SAFBC_FLASH_MISC_CFG_CS0_CONT_PREFIX_EN_Msk (_UINT32_(0x1) << SAFBC_FLASH_MISC_CFG_CS0_CONT_PREFIX_EN_Pos) /* (SAFBC_FLASH_MISC_CFG) Declares whether the Flash device on CS0# requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS0#.         1=A Prefix command will be issued from the CS0 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS0# before entry into Continuous Mode. Mask */
#define SAFBC_FLASH_MISC_CFG_CS0_CONT_PREFIX_EN(value) (SAFBC_FLASH_MISC_CFG_CS0_CONT_PREFIX_EN_Msk & (_UINT32_(value) << SAFBC_FLASH_MISC_CFG_CS0_CONT_PREFIX_EN_Pos)) /* Assigment of value for CS0_CONT_PREFIX_EN in the SAFBC_FLASH_MISC_CFG register */
#define SAFBC_FLASH_MISC_CFG_CS1_CONT_PREFIX_EN_Pos _UINT32_(7)                                          /* (SAFBC_FLASH_MISC_CFG) Declares whether the Flash device on CS1# (if any) requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS1#.         1=A Prefix command will be issued from the CS1 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS1# before entry into Continuous Mode. Position */
#define SAFBC_FLASH_MISC_CFG_CS1_CONT_PREFIX_EN_Msk (_UINT32_(0x1) << SAFBC_FLASH_MISC_CFG_CS1_CONT_PREFIX_EN_Pos) /* (SAFBC_FLASH_MISC_CFG) Declares whether the Flash device on CS1# (if any) requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS1#.         1=A Prefix command will be issued from the CS1 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS1# before entry into Continuous Mode. Mask */
#define SAFBC_FLASH_MISC_CFG_CS1_CONT_PREFIX_EN(value) (SAFBC_FLASH_MISC_CFG_CS1_CONT_PREFIX_EN_Msk & (_UINT32_(value) << SAFBC_FLASH_MISC_CFG_CS1_CONT_PREFIX_EN_Pos)) /* Assigment of value for CS1_CONT_PREFIX_EN in the SAFBC_FLASH_MISC_CFG register */
#define SAFBC_FLASH_MISC_CFG_SAF_MODE_EN_Pos  _UINT32_(12)                                         /* (SAFBC_FLASH_MISC_CFG) 0=SAFS Mode operation is globally disabled.               1=SAFS Mode operation is globally enabled. The Captive QMSPI Block register set and       the SAF Communication register set also become inaccessible to EC firmware. Position */
#define SAFBC_FLASH_MISC_CFG_SAF_MODE_EN_Msk  (_UINT32_(0x1) << SAFBC_FLASH_MISC_CFG_SAF_MODE_EN_Pos) /* (SAFBC_FLASH_MISC_CFG) 0=SAFS Mode operation is globally disabled.               1=SAFS Mode operation is globally enabled. The Captive QMSPI Block register set and       the SAF Communication register set also become inaccessible to EC firmware. Mask */
#define SAFBC_FLASH_MISC_CFG_SAF_MODE_EN(value) (SAFBC_FLASH_MISC_CFG_SAF_MODE_EN_Msk & (_UINT32_(value) << SAFBC_FLASH_MISC_CFG_SAF_MODE_EN_Pos)) /* Assigment of value for SAF_MODE_EN in the SAFBC_FLASH_MISC_CFG register */
#define SAFBC_FLASH_MISC_CFG_SAF_MODE_LOCK_Pos _UINT32_(13)                                         /* (SAFBC_FLASH_MISC_CFG) 0=The SAF Bridge register sets are unlocked and available R/W to EC firmware.               1=The SAF Bridge register sets Device Configuration and Device Timing, including this                register, are locked read-only to EC firmware. Position */
#define SAFBC_FLASH_MISC_CFG_SAF_MODE_LOCK_Msk (_UINT32_(0x1) << SAFBC_FLASH_MISC_CFG_SAF_MODE_LOCK_Pos) /* (SAFBC_FLASH_MISC_CFG) 0=The SAF Bridge register sets are unlocked and available R/W to EC firmware.               1=The SAF Bridge register sets Device Configuration and Device Timing, including this                register, are locked read-only to EC firmware. Mask */
#define SAFBC_FLASH_MISC_CFG_SAF_MODE_LOCK(value) (SAFBC_FLASH_MISC_CFG_SAF_MODE_LOCK_Msk & (_UINT32_(value) << SAFBC_FLASH_MISC_CFG_SAF_MODE_LOCK_Pos)) /* Assigment of value for SAF_MODE_LOCK in the SAFBC_FLASH_MISC_CFG register */
#define SAFBC_FLASH_MISC_CFG_Msk              _UINT32_(0x000030F3)                                 /* (SAFBC_FLASH_MISC_CFG) Register Mask  */


/* -------- SAFBC_ESPI_ERRINTR_STAT : (SAFBC Offset: 0x3C) (R/W 32) These bits may be individually enabled to trigger interrupts using the corresponding        Interrupt Enable register. -------- */
#define SAFBC_ESPI_ERRINTR_STAT_RESETVALUE    _UINT32_(0x00)                                       /*  (SAFBC_ESPI_ERRINTR_STAT) These bits may be individually enabled to trigger interrupts using the corresponding        Interrupt Enable register.  Reset Value */

#define SAFBC_ESPI_ERRINTR_STAT_TIMEOUT_Pos   _UINT32_(0)                                          /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that an Erase or Write request from the Host Chipset has failed               because the Flash has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_TIMEOUT_Msk   (_UINT32_(0x1) << SAFBC_ESPI_ERRINTR_STAT_TIMEOUT_Pos) /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that an Erase or Write request from the Host Chipset has failed               because the Flash has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_TIMEOUT(value) (SAFBC_ESPI_ERRINTR_STAT_TIMEOUT_Msk & (_UINT32_(value) << SAFBC_ESPI_ERRINTR_STAT_TIMEOUT_Pos)) /* Assigment of value for TIMEOUT in the SAFBC_ESPI_ERRINTR_STAT register */
#define SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE_Pos _UINT32_(1)                                          /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a request from the Host Chipset has been rejected because        it is beyond the physical limits of the attached Flash devices. This bit is cleared by        writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE_Msk (_UINT32_(0x1) << SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE_Pos) /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a request from the Host Chipset has been rejected because        it is beyond the physical limits of the attached Flash devices. This bit is cleared by        writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE(value) (SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE_Msk & (_UINT32_(value) << SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE_Pos)) /* Assigment of value for OUT_OF_RANGE in the SAFBC_ESPI_ERRINTR_STAT register */
#define SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLAT_Pos _UINT32_(2)                                          /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a request from the Host Chipset has been rejected because        it violates the Protection Register settings. This bit is cleared by writing '1' to its        position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLAT_Msk (_UINT32_(0x1) << SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLAT_Pos) /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a request from the Host Chipset has been rejected because        it violates the Protection Register settings. This bit is cleared by writing '1' to its        position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLAT(value) (SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLAT_Msk & (_UINT32_(value) << SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLAT_Pos)) /* Assigment of value for ACCESS_VIOLAT in the SAFBC_ESPI_ERRINTR_STAT register */
#define SAFBC_ESPI_ERRINTR_STAT_BOUND_4K_Pos  _UINT32_(3)                                          /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a Read request from the Host Chipset has been rejected        because it has attempted to cross a 4K Flash address boundary. This bit is cleared by        writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_BOUND_4K_Msk  (_UINT32_(0x1) << SAFBC_ESPI_ERRINTR_STAT_BOUND_4K_Pos) /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a Read request from the Host Chipset has been rejected        because it has attempted to cross a 4K Flash address boundary. This bit is cleared by        writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_BOUND_4K(value) (SAFBC_ESPI_ERRINTR_STAT_BOUND_4K_Msk & (_UINT32_(value) << SAFBC_ESPI_ERRINTR_STAT_BOUND_4K_Pos)) /* Assigment of value for BOUND_4K in the SAFBC_ESPI_ERRINTR_STAT register */
#define SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE_Pos _UINT32_(4)                                          /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that an invalid Erase Block Size has been specified in        an Erase request from the Host Chipset. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE_Msk (_UINT32_(0x1) << SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE_Pos) /* (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that an invalid Erase Block Size has been specified in        an Erase request from the Host Chipset. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE(value) (SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE_Msk & (_UINT32_(value) << SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE_Pos)) /* Assigment of value for ERASE_SIZE in the SAFBC_ESPI_ERRINTR_STAT register */
#define SAFBC_ESPI_ERRINTR_STAT_Msk           _UINT32_(0x0000001F)                                 /* (SAFBC_ESPI_ERRINTR_STAT) Register Mask  */


/* -------- SAFBC_ESPI_MON_STS : (SAFBC Offset: 0x40) (R/W 32) These bits individually enable the bits in SAF eSPI Monitor Status Register  to trigger    interrupts to the EC firmware. -------- */
#define SAFBC_ESPI_MON_STS_RESETVALUE         _UINT32_(0x00)                                       /*  (SAFBC_ESPI_MON_STS) These bits individually enable the bits in SAF eSPI Monitor Status Register  to trigger    interrupts to the EC firmware.  Reset Value */

#define SAFBC_ESPI_MON_STS_TIMEOUT_EN_Pos     _UINT32_(0)                                          /* (SAFBC_ESPI_MON_STS) This bit enables the TIMEOUT status bit as an interrupt. Position */
#define SAFBC_ESPI_MON_STS_TIMEOUT_EN_Msk     (_UINT32_(0x1) << SAFBC_ESPI_MON_STS_TIMEOUT_EN_Pos) /* (SAFBC_ESPI_MON_STS) This bit enables the TIMEOUT status bit as an interrupt. Mask */
#define SAFBC_ESPI_MON_STS_TIMEOUT_EN(value)  (SAFBC_ESPI_MON_STS_TIMEOUT_EN_Msk & (_UINT32_(value) << SAFBC_ESPI_MON_STS_TIMEOUT_EN_Pos)) /* Assigment of value for TIMEOUT_EN in the SAFBC_ESPI_MON_STS register */
#define SAFBC_ESPI_MON_STS_OUT_OF_RANGE_EN_Pos _UINT32_(1)                                          /* (SAFBC_ESPI_MON_STS) This bit enables the OUT_OF_RANGE status bit as an interrupt. Position */
#define SAFBC_ESPI_MON_STS_OUT_OF_RANGE_EN_Msk (_UINT32_(0x1) << SAFBC_ESPI_MON_STS_OUT_OF_RANGE_EN_Pos) /* (SAFBC_ESPI_MON_STS) This bit enables the OUT_OF_RANGE status bit as an interrupt. Mask */
#define SAFBC_ESPI_MON_STS_OUT_OF_RANGE_EN(value) (SAFBC_ESPI_MON_STS_OUT_OF_RANGE_EN_Msk & (_UINT32_(value) << SAFBC_ESPI_MON_STS_OUT_OF_RANGE_EN_Pos)) /* Assigment of value for OUT_OF_RANGE_EN in the SAFBC_ESPI_MON_STS register */
#define SAFBC_ESPI_MON_STS_ACCESS_VIOLAT_EN_Pos _UINT32_(2)                                          /* (SAFBC_ESPI_MON_STS) This bit enables the ACCESS_VIOLATION status bit as an interrupt. Position */
#define SAFBC_ESPI_MON_STS_ACCESS_VIOLAT_EN_Msk (_UINT32_(0x1) << SAFBC_ESPI_MON_STS_ACCESS_VIOLAT_EN_Pos) /* (SAFBC_ESPI_MON_STS) This bit enables the ACCESS_VIOLATION status bit as an interrupt. Mask */
#define SAFBC_ESPI_MON_STS_ACCESS_VIOLAT_EN(value) (SAFBC_ESPI_MON_STS_ACCESS_VIOLAT_EN_Msk & (_UINT32_(value) << SAFBC_ESPI_MON_STS_ACCESS_VIOLAT_EN_Pos)) /* Assigment of value for ACCESS_VIOLAT_EN in the SAFBC_ESPI_MON_STS register */
#define SAFBC_ESPI_MON_STS_BOUND_4K_EN_Pos    _UINT32_(3)                                          /* (SAFBC_ESPI_MON_STS) This bit enables the 4K_BOUNDARY status bit as an interrupt. Position */
#define SAFBC_ESPI_MON_STS_BOUND_4K_EN_Msk    (_UINT32_(0x1) << SAFBC_ESPI_MON_STS_BOUND_4K_EN_Pos) /* (SAFBC_ESPI_MON_STS) This bit enables the 4K_BOUNDARY status bit as an interrupt. Mask */
#define SAFBC_ESPI_MON_STS_BOUND_4K_EN(value) (SAFBC_ESPI_MON_STS_BOUND_4K_EN_Msk & (_UINT32_(value) << SAFBC_ESPI_MON_STS_BOUND_4K_EN_Pos)) /* Assigment of value for BOUND_4K_EN in the SAFBC_ESPI_MON_STS register */
#define SAFBC_ESPI_MON_STS_ERASE_SIZE_EN_Pos  _UINT32_(4)                                          /* (SAFBC_ESPI_MON_STS) This bit enables the ERASE_SIZE status bit as an interrupt. Position */
#define SAFBC_ESPI_MON_STS_ERASE_SIZE_EN_Msk  (_UINT32_(0x1) << SAFBC_ESPI_MON_STS_ERASE_SIZE_EN_Pos) /* (SAFBC_ESPI_MON_STS) This bit enables the ERASE_SIZE status bit as an interrupt. Mask */
#define SAFBC_ESPI_MON_STS_ERASE_SIZE_EN(value) (SAFBC_ESPI_MON_STS_ERASE_SIZE_EN_Msk & (_UINT32_(value) << SAFBC_ESPI_MON_STS_ERASE_SIZE_EN_Pos)) /* Assigment of value for ERASE_SIZE_EN in the SAFBC_ESPI_MON_STS register */
#define SAFBC_ESPI_MON_STS_Msk                _UINT32_(0x0000001F)                                 /* (SAFBC_ESPI_MON_STS) Register Mask  */


/* -------- SAFBC_EC_BUSY : (SAFBC Offset: 0x44) (R/W 32) This register holds the EC_BUSY status bit, which indicates when the EC Portal    is busy performing an access. -------- */
#define SAFBC_EC_BUSY_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_EC_BUSY) This register holds the EC_BUSY status bit, which indicates when the EC Portal    is busy performing an access.  Reset Value */

#define SAFBC_EC_BUSY_EC_BUSY_Pos             _UINT32_(0)                                          /* (SAFBC_EC_BUSY) This Read-Only bit is set to '1' by hardware when the START bit is written with        '1' to start a new request. It is cleared to '0' when request completes, and its        falling edge sets the DONE bit. While this bit is '1', the EC Portal Command, Flash        Address and Buffer Address registers are locked Read-Only, and the START bit is disabled,        causing it only to set the START_OVERFLOW error status bit to '1'. Position */
#define SAFBC_EC_BUSY_EC_BUSY_Msk             (_UINT32_(0x1) << SAFBC_EC_BUSY_EC_BUSY_Pos)         /* (SAFBC_EC_BUSY) This Read-Only bit is set to '1' by hardware when the START bit is written with        '1' to start a new request. It is cleared to '0' when request completes, and its        falling edge sets the DONE bit. While this bit is '1', the EC Portal Command, Flash        Address and Buffer Address registers are locked Read-Only, and the START bit is disabled,        causing it only to set the START_OVERFLOW error status bit to '1'. Mask */
#define SAFBC_EC_BUSY_EC_BUSY(value)          (SAFBC_EC_BUSY_EC_BUSY_Msk & (_UINT32_(value) << SAFBC_EC_BUSY_EC_BUSY_Pos)) /* Assigment of value for EC_BUSY in the SAFBC_EC_BUSY register */
#define SAFBC_EC_BUSY_Msk                     _UINT32_(0x00000001)                                 /* (SAFBC_EC_BUSY) Register Mask  */


/* -------- SAFBC_CS0_OPA : (SAFBC Offset: 0x4C) (R/W 32) There are two Opcode A registers, one associated with each of the Flashes. If the CS1     Flash does not exist, its register can be left in its default state. The four fields in each     register represent the 8-bit Flash opcodes for Write Enable, Suspend, Resume and Read Status     Register. The Status Register referred to is the register inside the Flash which contains the     (BUSY) or (IN PROGRESS) status bit in position 0. -------- */
#define SAFBC_CS0_OPA_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_CS0_OPA) There are two Opcode A registers, one associated with each of the Flashes. If the CS1     Flash does not exist, its register can be left in its default state. The four fields in each     register represent the 8-bit Flash opcodes for Write Enable, Suspend, Resume and Read Status     Register. The Status Register referred to is the register inside the Flash which contains the     (BUSY) or (IN PROGRESS) status bit in position 0.  Reset Value */

#define SAFBC_CS0_OPA_OP_WE_Pos               _UINT32_(0)                                          /* (SAFBC_CS0_OPA) This field contains the 8-bit Opcode for Write Enable in the respective Flash device. Position */
#define SAFBC_CS0_OPA_OP_WE_Msk               (_UINT32_(0xFF) << SAFBC_CS0_OPA_OP_WE_Pos)          /* (SAFBC_CS0_OPA) This field contains the 8-bit Opcode for Write Enable in the respective Flash device. Mask */
#define SAFBC_CS0_OPA_OP_WE(value)            (SAFBC_CS0_OPA_OP_WE_Msk & (_UINT32_(value) << SAFBC_CS0_OPA_OP_WE_Pos)) /* Assigment of value for OP_WE in the SAFBC_CS0_OPA register */
#define SAFBC_CS0_OPA_OP_SUS_Pos              _UINT32_(8)                                          /* (SAFBC_CS0_OPA) This field contains the 8-bit Opcode for Suspend in the respective Flash device. Position */
#define SAFBC_CS0_OPA_OP_SUS_Msk              (_UINT32_(0xFF) << SAFBC_CS0_OPA_OP_SUS_Pos)         /* (SAFBC_CS0_OPA) This field contains the 8-bit Opcode for Suspend in the respective Flash device. Mask */
#define SAFBC_CS0_OPA_OP_SUS(value)           (SAFBC_CS0_OPA_OP_SUS_Msk & (_UINT32_(value) << SAFBC_CS0_OPA_OP_SUS_Pos)) /* Assigment of value for OP_SUS in the SAFBC_CS0_OPA register */
#define SAFBC_CS0_OPA_OP_RSM_Pos              _UINT32_(16)                                         /* (SAFBC_CS0_OPA) This field contains the 8-bit Opcode for Resume in the respective Flash device. Position */
#define SAFBC_CS0_OPA_OP_RSM_Msk              (_UINT32_(0xFF) << SAFBC_CS0_OPA_OP_RSM_Pos)         /* (SAFBC_CS0_OPA) This field contains the 8-bit Opcode for Resume in the respective Flash device. Mask */
#define SAFBC_CS0_OPA_OP_RSM(value)           (SAFBC_CS0_OPA_OP_RSM_Msk & (_UINT32_(value) << SAFBC_CS0_OPA_OP_RSM_Pos)) /* Assigment of value for OP_RSM in the SAFBC_CS0_OPA register */
#define SAFBC_CS0_OPA_OP_POLL1_Pos            _UINT32_(24)                                         /* (SAFBC_CS0_OPA) This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. Position */
#define SAFBC_CS0_OPA_OP_POLL1_Msk            (_UINT32_(0xFF) << SAFBC_CS0_OPA_OP_POLL1_Pos)       /* (SAFBC_CS0_OPA) This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. Mask */
#define SAFBC_CS0_OPA_OP_POLL1(value)         (SAFBC_CS0_OPA_OP_POLL1_Msk & (_UINT32_(value) << SAFBC_CS0_OPA_OP_POLL1_Pos)) /* Assigment of value for OP_POLL1 in the SAFBC_CS0_OPA register */
#define SAFBC_CS0_OPA_Msk                     _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_CS0_OPA) Register Mask  */


/* -------- SAFBC_CS0_OPB : (SAFBC Offset: 0x50) (R/W 32) There are two Opcode B registers, one associated with each of the Flashes. If the CS1 Flash    does not exist, its register can be left in its default state. The OP_PROGRAM field is mandatory,    and must hold the Page Program opcode for the respective Flash. The Erase size of 4K is mandatory,    and so the OP_ERASE0 field must be initialized to the appropriate opcode for the Flash device.    There is only one bit declaring each Erase size up to the Host System (instead of one per Flash device,    see eSPI Configuration Register 44h), so if there are two Flash devices, each    Erase size over 4K must be declared here only if BOTH Flash devices support it. -------- */
#define SAFBC_CS0_OPB_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_CS0_OPB) There are two Opcode B registers, one associated with each of the Flashes. If the CS1 Flash    does not exist, its register can be left in its default state. The OP_PROGRAM field is mandatory,    and must hold the Page Program opcode for the respective Flash. The Erase size of 4K is mandatory,    and so the OP_ERASE0 field must be initialized to the appropriate opcode for the Flash device.    There is only one bit declaring each Erase size up to the Host System (instead of one per Flash device,    see eSPI Configuration Register 44h), so if there are two Flash devices, each    Erase size over 4K must be declared here only if BOTH Flash devices support it.  Reset Value */

#define SAFBC_CS0_OPB_OP_ERASE0_Pos           _UINT32_(0)                                          /* (SAFBC_CS0_OPB) This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. Position */
#define SAFBC_CS0_OPB_OP_ERASE0_Msk           (_UINT32_(0xFF) << SAFBC_CS0_OPB_OP_ERASE0_Pos)      /* (SAFBC_CS0_OPB) This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. Mask */
#define SAFBC_CS0_OPB_OP_ERASE0(value)        (SAFBC_CS0_OPB_OP_ERASE0_Msk & (_UINT32_(value) << SAFBC_CS0_OPB_OP_ERASE0_Pos)) /* Assigment of value for OP_ERASE0 in the SAFBC_CS0_OPB register */
#define SAFBC_CS0_OPB_OP_ERASE1_Pos           _UINT32_(8)                                          /* (SAFBC_CS0_OPB) This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Position */
#define SAFBC_CS0_OPB_OP_ERASE1_Msk           (_UINT32_(0xFF) << SAFBC_CS0_OPB_OP_ERASE1_Pos)      /* (SAFBC_CS0_OPB) This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Mask */
#define SAFBC_CS0_OPB_OP_ERASE1(value)        (SAFBC_CS0_OPB_OP_ERASE1_Msk & (_UINT32_(value) << SAFBC_CS0_OPB_OP_ERASE1_Pos)) /* Assigment of value for OP_ERASE1 in the SAFBC_CS0_OPB register */
#define SAFBC_CS0_OPB_OP_ERASE2_Pos           _UINT32_(16)                                         /* (SAFBC_CS0_OPB) This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Position */
#define SAFBC_CS0_OPB_OP_ERASE2_Msk           (_UINT32_(0xFF) << SAFBC_CS0_OPB_OP_ERASE2_Pos)      /* (SAFBC_CS0_OPB) This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Mask */
#define SAFBC_CS0_OPB_OP_ERASE2(value)        (SAFBC_CS0_OPB_OP_ERASE2_Msk & (_UINT32_(value) << SAFBC_CS0_OPB_OP_ERASE2_Pos)) /* Assigment of value for OP_ERASE2 in the SAFBC_CS0_OPB register */
#define SAFBC_CS0_OPB_OP_PRG_Pos              _UINT32_(24)                                         /* (SAFBC_CS0_OPB) This field contains the 8-bit Opcode for Page Program in the respective Flash device. Position */
#define SAFBC_CS0_OPB_OP_PRG_Msk              (_UINT32_(0xFF) << SAFBC_CS0_OPB_OP_PRG_Pos)         /* (SAFBC_CS0_OPB) This field contains the 8-bit Opcode for Page Program in the respective Flash device. Mask */
#define SAFBC_CS0_OPB_OP_PRG(value)           (SAFBC_CS0_OPB_OP_PRG_Msk & (_UINT32_(value) << SAFBC_CS0_OPB_OP_PRG_Pos)) /* Assigment of value for OP_PRG in the SAFBC_CS0_OPB register */
#define SAFBC_CS0_OPB_Msk                     _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_CS0_OPB) Register Mask  */


/* -------- SAFBC_CS0_OPC : (SAFBC Offset: 0x54) (R/W 32) There are two Opcode C registers, one associated with each of the Flashes. If the CS1 Flash     does not exist, its register can be left in its default state. Two fields (OP) define opcodes,     and two fields (MODE) represent the Mode code values. Mode codes are provided immediately after     the Address in Continuous Read traffic, and are used to keep the Flash device in Continuous     Read Mode. Depending on the Flash device manufacturer, this mode may be documented in their     datasheet as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy     clock. The recommended Mode values given below are selected to be appropriate for any Flash device. -------- */
#define SAFBC_CS0_OPC_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_CS0_OPC) There are two Opcode C registers, one associated with each of the Flashes. If the CS1 Flash     does not exist, its register can be left in its default state. Two fields (OP) define opcodes,     and two fields (MODE) represent the Mode code values. Mode codes are provided immediately after     the Address in Continuous Read traffic, and are used to keep the Flash device in Continuous     Read Mode. Depending on the Flash device manufacturer, this mode may be documented in their     datasheet as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy     clock. The recommended Mode values given below are selected to be appropriate for any Flash device.  Reset Value */

#define SAFBC_CS0_OPC_OP_READ_Pos             _UINT32_(0)                                          /* (SAFBC_CS0_OPC) This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. Position */
#define SAFBC_CS0_OPC_OP_READ_Msk             (_UINT32_(0xFF) << SAFBC_CS0_OPC_OP_READ_Pos)        /* (SAFBC_CS0_OPC) This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. Mask */
#define SAFBC_CS0_OPC_OP_READ(value)          (SAFBC_CS0_OPC_OP_READ_Msk & (_UINT32_(value) << SAFBC_CS0_OPC_OP_READ_Pos)) /* Assigment of value for OP_READ in the SAFBC_CS0_OPC register */
#define SAFBC_CS0_OPC_MODE_NONC_Pos           _UINT32_(8)                                          /* (SAFBC_CS0_OPC) This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. Position */
#define SAFBC_CS0_OPC_MODE_NONC_Msk           (_UINT32_(0xFF) << SAFBC_CS0_OPC_MODE_NONC_Pos)      /* (SAFBC_CS0_OPC) This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. Mask */
#define SAFBC_CS0_OPC_MODE_NONC(value)        (SAFBC_CS0_OPC_MODE_NONC_Msk & (_UINT32_(value) << SAFBC_CS0_OPC_MODE_NONC_Pos)) /* Assigment of value for MODE_NONC in the SAFBC_CS0_OPC register */
#define SAFBC_CS0_OPC_MODE_CONT_Pos           _UINT32_(16)                                         /* (SAFBC_CS0_OPC) This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. Position */
#define SAFBC_CS0_OPC_MODE_CONT_Msk           (_UINT32_(0xFF) << SAFBC_CS0_OPC_MODE_CONT_Pos)      /* (SAFBC_CS0_OPC) This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. Mask */
#define SAFBC_CS0_OPC_MODE_CONT(value)        (SAFBC_CS0_OPC_MODE_CONT_Msk & (_UINT32_(value) << SAFBC_CS0_OPC_MODE_CONT_Pos)) /* Assigment of value for MODE_CONT in the SAFBC_CS0_OPC register */
#define SAFBC_CS0_OPC_OP_POLL2_Pos            _UINT32_(24)                                         /* (SAFBC_CS0_OPC) This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register Position */
#define SAFBC_CS0_OPC_OP_POLL2_Msk            (_UINT32_(0xFF) << SAFBC_CS0_OPC_OP_POLL2_Pos)       /* (SAFBC_CS0_OPC) This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register Mask */
#define SAFBC_CS0_OPC_OP_POLL2(value)         (SAFBC_CS0_OPC_OP_POLL2_Msk & (_UINT32_(value) << SAFBC_CS0_OPC_OP_POLL2_Pos)) /* Assigment of value for OP_POLL2 in the SAFBC_CS0_OPC register */
#define SAFBC_CS0_OPC_Msk                     _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_CS0_OPC) Register Mask  */


/* -------- SAFBC_CS0_PFD : (SAFBC Offset: 0x58) (R/W 32) There are two Per-Flash Descriptors registers, one associated with each of the Flash devices.     If the CS1 Flash does not exist, its register can be left in its default state. Each 4-bit field     is a pointer which identifies a Timing Descriptor location in the Captive QMSPI block's Timing     Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 -------- */
#define SAFBC_CS0_PFD_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_CS0_PFD) There are two Per-Flash Descriptors registers, one associated with each of the Flash devices.     If the CS1 Flash does not exist, its register can be left in its default state. Each 4-bit field     is a pointer which identifies a Timing Descriptor location in the Captive QMSPI block's Timing     Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1  Reset Value */

#define SAFBC_CS0_PFD_ENTER_CONT_Pos          _UINT32_(0)                                          /* (SAFBC_CS0_PFD) This field points to the first Descriptor element of the Enter Continuous Mode chain. Position */
#define SAFBC_CS0_PFD_ENTER_CONT_Msk          (_UINT32_(0xF) << SAFBC_CS0_PFD_ENTER_CONT_Pos)      /* (SAFBC_CS0_PFD) This field points to the first Descriptor element of the Enter Continuous Mode chain. Mask */
#define SAFBC_CS0_PFD_ENTER_CONT(value)       (SAFBC_CS0_PFD_ENTER_CONT_Msk & (_UINT32_(value) << SAFBC_CS0_PFD_ENTER_CONT_Pos)) /* Assigment of value for ENTER_CONT in the SAFBC_CS0_PFD register */
#define SAFBC_CS0_PFD_READ_CONT_Pos           _UINT32_(8)                                          /* (SAFBC_CS0_PFD) This field points to the first Descriptor element of the Continuous Read chain. Position */
#define SAFBC_CS0_PFD_READ_CONT_Msk           (_UINT32_(0xF) << SAFBC_CS0_PFD_READ_CONT_Pos)       /* (SAFBC_CS0_PFD) This field points to the first Descriptor element of the Continuous Read chain. Mask */
#define SAFBC_CS0_PFD_READ_CONT(value)        (SAFBC_CS0_PFD_READ_CONT_Msk & (_UINT32_(value) << SAFBC_CS0_PFD_READ_CONT_Pos)) /* Assigment of value for READ_CONT in the SAFBC_CS0_PFD register */
#define SAFBC_CS0_PFD_SIZE_CONT_Pos           _UINT32_(12)                                         /* (SAFBC_CS0_PFD) This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. Position */
#define SAFBC_CS0_PFD_SIZE_CONT_Msk           (_UINT32_(0xF) << SAFBC_CS0_PFD_SIZE_CONT_Pos)       /* (SAFBC_CS0_PFD) This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. Mask */
#define SAFBC_CS0_PFD_SIZE_CONT(value)        (SAFBC_CS0_PFD_SIZE_CONT_Msk & (_UINT32_(value) << SAFBC_CS0_PFD_SIZE_CONT_Pos)) /* Assigment of value for SIZE_CONT in the SAFBC_CS0_PFD register */
#define SAFBC_CS0_PFD_Msk                     _UINT32_(0x0000FF0F)                                 /* (SAFBC_CS0_PFD) Register Mask  */


/* -------- SAFBC_CS1_OPA : (SAFBC Offset: 0x5C) (R/W 32) This is the CS1 Opcode A register. \n   If the CS1 Flash does not exist, its register can be left in its default state. The four fields in each register represent the 8-bit Flash\n   opcodes for Write Enable, Suspend, Resume and Read Status Register. The Status Register referred to is the register inside the Flash which\n          contains the BUSY or IN PROGRESS status bit in position 0. -------- */
#define SAFBC_CS1_OPA_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_CS1_OPA) This is the CS1 Opcode A register. \n   If the CS1 Flash does not exist, its register can be left in its default state. The four fields in each register represent the 8-bit Flash\n   opcodes for Write Enable, Suspend, Resume and Read Status Register. The Status Register referred to is the register inside the Flash which\n          contains the BUSY or IN PROGRESS status bit in position 0.  Reset Value */

#define SAFBC_CS1_OPA_OP_WE_Pos               _UINT32_(0)                                          /* (SAFBC_CS1_OPA) This field contains the 8-bit Opcode for Write Enable in the respective Flash device. Position */
#define SAFBC_CS1_OPA_OP_WE_Msk               (_UINT32_(0xFF) << SAFBC_CS1_OPA_OP_WE_Pos)          /* (SAFBC_CS1_OPA) This field contains the 8-bit Opcode for Write Enable in the respective Flash device. Mask */
#define SAFBC_CS1_OPA_OP_WE(value)            (SAFBC_CS1_OPA_OP_WE_Msk & (_UINT32_(value) << SAFBC_CS1_OPA_OP_WE_Pos)) /* Assigment of value for OP_WE in the SAFBC_CS1_OPA register */
#define SAFBC_CS1_OPA_OP_SUS_Pos              _UINT32_(8)                                          /* (SAFBC_CS1_OPA) This field contains the 8-bit Opcode for Suspend in the respective Flash device. Position */
#define SAFBC_CS1_OPA_OP_SUS_Msk              (_UINT32_(0xFF) << SAFBC_CS1_OPA_OP_SUS_Pos)         /* (SAFBC_CS1_OPA) This field contains the 8-bit Opcode for Suspend in the respective Flash device. Mask */
#define SAFBC_CS1_OPA_OP_SUS(value)           (SAFBC_CS1_OPA_OP_SUS_Msk & (_UINT32_(value) << SAFBC_CS1_OPA_OP_SUS_Pos)) /* Assigment of value for OP_SUS in the SAFBC_CS1_OPA register */
#define SAFBC_CS1_OPA_OP_RSM_Pos              _UINT32_(16)                                         /* (SAFBC_CS1_OPA) This field contains the 8-bit Opcode for Resume in the respective Flash device. Position */
#define SAFBC_CS1_OPA_OP_RSM_Msk              (_UINT32_(0xFF) << SAFBC_CS1_OPA_OP_RSM_Pos)         /* (SAFBC_CS1_OPA) This field contains the 8-bit Opcode for Resume in the respective Flash device. Mask */
#define SAFBC_CS1_OPA_OP_RSM(value)           (SAFBC_CS1_OPA_OP_RSM_Msk & (_UINT32_(value) << SAFBC_CS1_OPA_OP_RSM_Pos)) /* Assigment of value for OP_RSM in the SAFBC_CS1_OPA register */
#define SAFBC_CS1_OPA_OP_POLL1_Pos            _UINT32_(24)                                         /* (SAFBC_CS1_OPA) This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. Position */
#define SAFBC_CS1_OPA_OP_POLL1_Msk            (_UINT32_(0xFF) << SAFBC_CS1_OPA_OP_POLL1_Pos)       /* (SAFBC_CS1_OPA) This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. Mask */
#define SAFBC_CS1_OPA_OP_POLL1(value)         (SAFBC_CS1_OPA_OP_POLL1_Msk & (_UINT32_(value) << SAFBC_CS1_OPA_OP_POLL1_Pos)) /* Assigment of value for OP_POLL1 in the SAFBC_CS1_OPA register */
#define SAFBC_CS1_OPA_Msk                     _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_CS1_OPA) Register Mask  */


/* -------- SAFBC_CS1_OPB : (SAFBC Offset: 0x60) (R/W 32) This is the CS1 Flash Opcode B register. If the CS1 Flash does not exist, its register can be     left in its default state. The OP_PROGRAM field is mandatory, and must hold the Page Program     opcode for the respective Flash. The Erase size of 4K is mandatory, and so the OP_ERASE0 field     must be initialized to the appropriate opcode for the Flash device. There is only one bit     declaring each Erase size up to the Host System (instead of one per Flash device, see eSPI     Configuration Register 44h), so if there are two Flash devices, each Erase size over 4K must     be declared here only if BOTH Flash devices support it. -------- */
#define SAFBC_CS1_OPB_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_CS1_OPB) This is the CS1 Flash Opcode B register. If the CS1 Flash does not exist, its register can be     left in its default state. The OP_PROGRAM field is mandatory, and must hold the Page Program     opcode for the respective Flash. The Erase size of 4K is mandatory, and so the OP_ERASE0 field     must be initialized to the appropriate opcode for the Flash device. There is only one bit     declaring each Erase size up to the Host System (instead of one per Flash device, see eSPI     Configuration Register 44h), so if there are two Flash devices, each Erase size over 4K must     be declared here only if BOTH Flash devices support it.  Reset Value */

#define SAFBC_CS1_OPB_OP_ERASE0_Pos           _UINT32_(0)                                          /* (SAFBC_CS1_OPB) This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. Position */
#define SAFBC_CS1_OPB_OP_ERASE0_Msk           (_UINT32_(0xFF) << SAFBC_CS1_OPB_OP_ERASE0_Pos)      /* (SAFBC_CS1_OPB) This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. Mask */
#define SAFBC_CS1_OPB_OP_ERASE0(value)        (SAFBC_CS1_OPB_OP_ERASE0_Msk & (_UINT32_(value) << SAFBC_CS1_OPB_OP_ERASE0_Pos)) /* Assigment of value for OP_ERASE0 in the SAFBC_CS1_OPB register */
#define SAFBC_CS1_OPB_OP_ERASE1_Pos           _UINT32_(8)                                          /* (SAFBC_CS1_OPB) This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Position */
#define SAFBC_CS1_OPB_OP_ERASE1_Msk           (_UINT32_(0xFF) << SAFBC_CS1_OPB_OP_ERASE1_Pos)      /* (SAFBC_CS1_OPB) This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Mask */
#define SAFBC_CS1_OPB_OP_ERASE1(value)        (SAFBC_CS1_OPB_OP_ERASE1_Msk & (_UINT32_(value) << SAFBC_CS1_OPB_OP_ERASE1_Pos)) /* Assigment of value for OP_ERASE1 in the SAFBC_CS1_OPB register */
#define SAFBC_CS1_OPB_OP_ERASE2_Pos           _UINT32_(16)                                         /* (SAFBC_CS1_OPB) This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Position */
#define SAFBC_CS1_OPB_OP_ERASE2_Msk           (_UINT32_(0xFF) << SAFBC_CS1_OPB_OP_ERASE2_Pos)      /* (SAFBC_CS1_OPB) This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Mask */
#define SAFBC_CS1_OPB_OP_ERASE2(value)        (SAFBC_CS1_OPB_OP_ERASE2_Msk & (_UINT32_(value) << SAFBC_CS1_OPB_OP_ERASE2_Pos)) /* Assigment of value for OP_ERASE2 in the SAFBC_CS1_OPB register */
#define SAFBC_CS1_OPB_OP_PROGRAM_Pos          _UINT32_(24)                                         /* (SAFBC_CS1_OPB) This field contains the 8-bit Opcode for Page Program in the respective Flash device. Position */
#define SAFBC_CS1_OPB_OP_PROGRAM_Msk          (_UINT32_(0xFF) << SAFBC_CS1_OPB_OP_PROGRAM_Pos)     /* (SAFBC_CS1_OPB) This field contains the 8-bit Opcode for Page Program in the respective Flash device. Mask */
#define SAFBC_CS1_OPB_OP_PROGRAM(value)       (SAFBC_CS1_OPB_OP_PROGRAM_Msk & (_UINT32_(value) << SAFBC_CS1_OPB_OP_PROGRAM_Pos)) /* Assigment of value for OP_PROGRAM in the SAFBC_CS1_OPB register */
#define SAFBC_CS1_OPB_Msk                     _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_CS1_OPB) Register Mask  */


/* -------- SAFBC_CS1_OPC : (SAFBC Offset: 0x64) (R/W 32) This is the CS1 Flash device Opcode C register. If the CS1 Flash does not exist, its     register can be left in its default state. Two fields (OP) define opcodes, and two fields     (MODE) represent the Mode code values. Mode codes are provided immediately after the Address     in Continuous Read traffic, and are used to keep the Flash device in Continuous Read Mode.     Depending on the Flash device manufacturer, this mode may be documented in their datasheet     as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy clock.     The recommended Mode values given below are selected to be appropriate for any Flash device. -------- */
#define SAFBC_CS1_OPC_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_CS1_OPC) This is the CS1 Flash device Opcode C register. If the CS1 Flash does not exist, its     register can be left in its default state. Two fields (OP) define opcodes, and two fields     (MODE) represent the Mode code values. Mode codes are provided immediately after the Address     in Continuous Read traffic, and are used to keep the Flash device in Continuous Read Mode.     Depending on the Flash device manufacturer, this mode may be documented in their datasheet     as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy clock.     The recommended Mode values given below are selected to be appropriate for any Flash device.  Reset Value */

#define SAFBC_CS1_OPC_OP_READ_Pos             _UINT32_(0)                                          /* (SAFBC_CS1_OPC) This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. Position */
#define SAFBC_CS1_OPC_OP_READ_Msk             (_UINT32_(0xFF) << SAFBC_CS1_OPC_OP_READ_Pos)        /* (SAFBC_CS1_OPC) This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. Mask */
#define SAFBC_CS1_OPC_OP_READ(value)          (SAFBC_CS1_OPC_OP_READ_Msk & (_UINT32_(value) << SAFBC_CS1_OPC_OP_READ_Pos)) /* Assigment of value for OP_READ in the SAFBC_CS1_OPC register */
#define SAFBC_CS1_OPC_MODE_NONC_Pos           _UINT32_(8)                                          /* (SAFBC_CS1_OPC) This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. Position */
#define SAFBC_CS1_OPC_MODE_NONC_Msk           (_UINT32_(0xFF) << SAFBC_CS1_OPC_MODE_NONC_Pos)      /* (SAFBC_CS1_OPC) This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. Mask */
#define SAFBC_CS1_OPC_MODE_NONC(value)        (SAFBC_CS1_OPC_MODE_NONC_Msk & (_UINT32_(value) << SAFBC_CS1_OPC_MODE_NONC_Pos)) /* Assigment of value for MODE_NONC in the SAFBC_CS1_OPC register */
#define SAFBC_CS1_OPC_MODE_CONT_Pos           _UINT32_(16)                                         /* (SAFBC_CS1_OPC) This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. Position */
#define SAFBC_CS1_OPC_MODE_CONT_Msk           (_UINT32_(0xFF) << SAFBC_CS1_OPC_MODE_CONT_Pos)      /* (SAFBC_CS1_OPC) This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. Mask */
#define SAFBC_CS1_OPC_MODE_CONT(value)        (SAFBC_CS1_OPC_MODE_CONT_Msk & (_UINT32_(value) << SAFBC_CS1_OPC_MODE_CONT_Pos)) /* Assigment of value for MODE_CONT in the SAFBC_CS1_OPC register */
#define SAFBC_CS1_OPC_OP_POLL2_Pos            _UINT32_(24)                                         /* (SAFBC_CS1_OPC) This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register Position */
#define SAFBC_CS1_OPC_OP_POLL2_Msk            (_UINT32_(0xFF) << SAFBC_CS1_OPC_OP_POLL2_Pos)       /* (SAFBC_CS1_OPC) This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register Mask */
#define SAFBC_CS1_OPC_OP_POLL2(value)         (SAFBC_CS1_OPC_OP_POLL2_Msk & (_UINT32_(value) << SAFBC_CS1_OPC_OP_POLL2_Pos)) /* Assigment of value for OP_POLL2 in the SAFBC_CS1_OPC register */
#define SAFBC_CS1_OPC_Msk                     _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_CS1_OPC) Register Mask  */


/* -------- SAFBC_CS1_PFD : (SAFBC Offset: 0x68) (R/W 32) This is the Per-Flash Descriptors register for CS1 Flash . If the CS1 Flash does not exist,     its register can be left in its default state. Each 4-bit field is a pointer which identifies a     Timing Descriptor location in the Captive QMSPI block's Timing Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 -------- */
#define SAFBC_CS1_PFD_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_CS1_PFD) This is the Per-Flash Descriptors register for CS1 Flash . If the CS1 Flash does not exist,     its register can be left in its default state. Each 4-bit field is a pointer which identifies a     Timing Descriptor location in the Captive QMSPI block's Timing Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1  Reset Value */

#define SAFBC_CS1_PFD_ENTER_CONT_Pos          _UINT32_(0)                                          /* (SAFBC_CS1_PFD) This field points to the first Descriptor element of the Enter Continuous Mode chain. Position */
#define SAFBC_CS1_PFD_ENTER_CONT_Msk          (_UINT32_(0xF) << SAFBC_CS1_PFD_ENTER_CONT_Pos)      /* (SAFBC_CS1_PFD) This field points to the first Descriptor element of the Enter Continuous Mode chain. Mask */
#define SAFBC_CS1_PFD_ENTER_CONT(value)       (SAFBC_CS1_PFD_ENTER_CONT_Msk & (_UINT32_(value) << SAFBC_CS1_PFD_ENTER_CONT_Pos)) /* Assigment of value for ENTER_CONT in the SAFBC_CS1_PFD register */
#define SAFBC_CS1_PFD_READ_CONT_Pos           _UINT32_(8)                                          /* (SAFBC_CS1_PFD) This field points to the first Descriptor element of the Continuous Read chain. Position */
#define SAFBC_CS1_PFD_READ_CONT_Msk           (_UINT32_(0xF) << SAFBC_CS1_PFD_READ_CONT_Pos)       /* (SAFBC_CS1_PFD) This field points to the first Descriptor element of the Continuous Read chain. Mask */
#define SAFBC_CS1_PFD_READ_CONT(value)        (SAFBC_CS1_PFD_READ_CONT_Msk & (_UINT32_(value) << SAFBC_CS1_PFD_READ_CONT_Pos)) /* Assigment of value for READ_CONT in the SAFBC_CS1_PFD register */
#define SAFBC_CS1_PFD_SIZE_CONT_Pos           _UINT32_(12)                                         /* (SAFBC_CS1_PFD) This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. Position */
#define SAFBC_CS1_PFD_SIZE_CONT_Msk           (_UINT32_(0xF) << SAFBC_CS1_PFD_SIZE_CONT_Pos)       /* (SAFBC_CS1_PFD) This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. Mask */
#define SAFBC_CS1_PFD_SIZE_CONT(value)        (SAFBC_CS1_PFD_SIZE_CONT_Msk & (_UINT32_(value) << SAFBC_CS1_PFD_SIZE_CONT_Pos)) /* Assigment of value for SIZE_CONT in the SAFBC_CS1_PFD register */
#define SAFBC_CS1_PFD_Msk                     _UINT32_(0x0000FF0F)                                 /* (SAFBC_CS1_PFD) Register Mask  */


/* -------- SAFBC_GEND : (SAFBC Offset: 0x6C) (R/W 32) This is a single register, which accompanies the two Per-Flash Descriptors registers, and     provides Descriptor pointers that are shared by both CS0 and CS1 devices uniformly.     Each 4-bit field is a pointer which identifies a Timing Descriptor location in the Captive     QMSPI block's memory. The EXIT_CONT field (Exit Continuous Mode) points to the single chain     invoked to exit the Flash from Continuous Mode, allowing an Erase or Program command to be     entered. This chain is identical for either Flash device, regardless of its manufacturer, and     simply directs a universal Exit symbol to the appropriate CS0/CS1 device. The POLL1 and POLL2     fields should both point to the same chain. This chain will issue the appropriate opcode for the     operation (Poll1 or Poll2) supplied by the SAF Bridge from the Opcode registers, and will read     back 16 bits of information for use by the SAF Bridge. -------- */
#define SAFBC_GEND_RESETVALUE                 _UINT32_(0x00)                                       /*  (SAFBC_GEND) This is a single register, which accompanies the two Per-Flash Descriptors registers, and     provides Descriptor pointers that are shared by both CS0 and CS1 devices uniformly.     Each 4-bit field is a pointer which identifies a Timing Descriptor location in the Captive     QMSPI block's memory. The EXIT_CONT field (Exit Continuous Mode) points to the single chain     invoked to exit the Flash from Continuous Mode, allowing an Erase or Program command to be     entered. This chain is identical for either Flash device, regardless of its manufacturer, and     simply directs a universal Exit symbol to the appropriate CS0/CS1 device. The POLL1 and POLL2     fields should both point to the same chain. This chain will issue the appropriate opcode for the     operation (Poll1 or Poll2) supplied by the SAF Bridge from the Opcode registers, and will read     back 16 bits of information for use by the SAF Bridge.  Reset Value */

#define SAFBC_GEND_EXIT_CONT_Pos              _UINT32_(0)                                          /* (SAFBC_GEND) This field points to the first Descriptor element of the Exit Continuous Mode chain. Position */
#define SAFBC_GEND_EXIT_CONT_Msk              (_UINT32_(0xF) << SAFBC_GEND_EXIT_CONT_Pos)          /* (SAFBC_GEND) This field points to the first Descriptor element of the Exit Continuous Mode chain. Mask */
#define SAFBC_GEND_EXIT_CONT(value)           (SAFBC_GEND_EXIT_CONT_Msk & (_UINT32_(value) << SAFBC_GEND_EXIT_CONT_Pos)) /* Assigment of value for EXIT_CONT in the SAFBC_GEND register */
#define SAFBC_GEND_POLL1_Pos                  _UINT32_(8)                                          /* (SAFBC_GEND) This field points to the first Descriptor element of the Poll chain, used when         polling for Busy status. Position */
#define SAFBC_GEND_POLL1_Msk                  (_UINT32_(0xF) << SAFBC_GEND_POLL1_Pos)              /* (SAFBC_GEND) This field points to the first Descriptor element of the Poll chain, used when         polling for Busy status. Mask */
#define SAFBC_GEND_POLL1(value)               (SAFBC_GEND_POLL1_Msk & (_UINT32_(value) << SAFBC_GEND_POLL1_Pos)) /* Assigment of value for POLL1 in the SAFBC_GEND register */
#define SAFBC_GEND_POLL2_Pos                  _UINT32_(12)                                         /* (SAFBC_GEND) This field points to the first Descriptor element of the Poll chain, used when         polling for Suspended status. Position */
#define SAFBC_GEND_POLL2_Msk                  (_UINT32_(0xF) << SAFBC_GEND_POLL2_Pos)              /* (SAFBC_GEND) This field points to the first Descriptor element of the Poll chain, used when         polling for Suspended status. Mask */
#define SAFBC_GEND_POLL2(value)               (SAFBC_GEND_POLL2_Msk & (_UINT32_(value) << SAFBC_GEND_POLL2_Pos)) /* Assigment of value for POLL2 in the SAFBC_GEND register */
#define SAFBC_GEND_Msk                        _UINT32_(0x0000FF0F)                                 /* (SAFBC_GEND) Register Mask  */


/* -------- SAFBC_PRLOCK : (SAFBC Offset: 0x70) (R/W 32) There is a bit in this register for each of the 17 Protection Region Register sets. Writing     '1' to a bit locks the associated 4-Register set to Read-Only access, and also locks this bit     itself to a Read-Only '1'. -------- */
#define SAFBC_PRLOCK_RESETVALUE               _UINT32_(0x00)                                       /*  (SAFBC_PRLOCK) There is a bit in this register for each of the 17 Protection Region Register sets. Writing     '1' to a bit locks the associated 4-Register set to Read-Only access, and also locks this bit     itself to a Read-Only '1'.  Reset Value */

#define SAFBC_PRLOCK_SAF_0_Pos                _UINT32_(0)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 0: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_0_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_0_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 0: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_0(value)             (SAFBC_PRLOCK_SAF_0_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_0_Pos)) /* Assigment of value for SAF_0 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_1_Pos                _UINT32_(1)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 1: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_1_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_1_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 1: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_1(value)             (SAFBC_PRLOCK_SAF_1_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_1_Pos)) /* Assigment of value for SAF_1 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_2_Pos                _UINT32_(2)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 2: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_2_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_2_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 2: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_2(value)             (SAFBC_PRLOCK_SAF_2_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_2_Pos)) /* Assigment of value for SAF_2 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_3_Pos                _UINT32_(3)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 3: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_3_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_3_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 3: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_3(value)             (SAFBC_PRLOCK_SAF_3_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_3_Pos)) /* Assigment of value for SAF_3 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_4_Pos                _UINT32_(4)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 4: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_4_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_4_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 4: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_4(value)             (SAFBC_PRLOCK_SAF_4_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_4_Pos)) /* Assigment of value for SAF_4 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_5_Pos                _UINT32_(5)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 5: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_5_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_5_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 5: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_5(value)             (SAFBC_PRLOCK_SAF_5_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_5_Pos)) /* Assigment of value for SAF_5 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_6_Pos                _UINT32_(6)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 6: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_6_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_6_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 6: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_6(value)             (SAFBC_PRLOCK_SAF_6_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_6_Pos)) /* Assigment of value for SAF_6 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_7_Pos                _UINT32_(7)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 7: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_7_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_7_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 7: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_7(value)             (SAFBC_PRLOCK_SAF_7_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_7_Pos)) /* Assigment of value for SAF_7 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_8_Pos                _UINT32_(8)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 8: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_8_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_8_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 8: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_8(value)             (SAFBC_PRLOCK_SAF_8_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_8_Pos)) /* Assigment of value for SAF_8 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_9_Pos                _UINT32_(9)                                          /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 9: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_9_Msk                (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_9_Pos)            /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 9: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_9(value)             (SAFBC_PRLOCK_SAF_9_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_9_Pos)) /* Assigment of value for SAF_9 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_10_Pos               _UINT32_(10)                                         /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 10: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_10_Msk               (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_10_Pos)           /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 10: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_10(value)            (SAFBC_PRLOCK_SAF_10_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_10_Pos)) /* Assigment of value for SAF_10 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_11_Pos               _UINT32_(11)                                         /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 11: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_11_Msk               (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_11_Pos)           /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 11: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_11(value)            (SAFBC_PRLOCK_SAF_11_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_11_Pos)) /* Assigment of value for SAF_11 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_12_Pos               _UINT32_(12)                                         /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 12: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_12_Msk               (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_12_Pos)           /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 12: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_12(value)            (SAFBC_PRLOCK_SAF_12_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_12_Pos)) /* Assigment of value for SAF_12 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_13_Pos               _UINT32_(13)                                         /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 13: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_13_Msk               (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_13_Pos)           /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 13: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_13(value)            (SAFBC_PRLOCK_SAF_13_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_13_Pos)) /* Assigment of value for SAF_13 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_14_Pos               _UINT32_(14)                                         /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 14: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_14_Msk               (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_14_Pos)           /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 14: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_14(value)            (SAFBC_PRLOCK_SAF_14_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_14_Pos)) /* Assigment of value for SAF_14 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_15_Pos               _UINT32_(15)                                         /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 15: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_15_Msk               (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_15_Pos)           /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 15: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_15(value)            (SAFBC_PRLOCK_SAF_15_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_15_Pos)) /* Assigment of value for SAF_15 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_SAF_16_Pos               _UINT32_(16)                                         /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 16: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PRLOCK_SAF_16_Msk               (_UINT32_(0x1) << SAFBC_PRLOCK_SAF_16_Pos)           /* (SAFBC_PRLOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 16: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PRLOCK_SAF_16(value)            (SAFBC_PRLOCK_SAF_16_Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF_16_Pos)) /* Assigment of value for SAF_16 in the SAFBC_PRLOCK register */
#define SAFBC_PRLOCK_Msk                      _UINT32_(0x0001FFFF)                                 /* (SAFBC_PRLOCK) Register Mask  */

#define SAFBC_PRLOCK_SAF__Pos                 _UINT32_(0)                                          /* (SAFBC_PRLOCK Position) In its initial x state, this bit allows Read and Write access to the corresponding         Region Register set RR = x6: Start, Limit, Write and Read.          When written to x, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
#define SAFBC_PRLOCK_SAF__Msk                 (_UINT32_(0x1FFFF) << SAFBC_PRLOCK_SAF__Pos)         /* (SAFBC_PRLOCK Mask) SAF_ */
#define SAFBC_PRLOCK_SAF_(value)              (SAFBC_PRLOCK_SAF__Msk & (_UINT32_(value) << SAFBC_PRLOCK_SAF__Pos)) 

/* -------- SAFBC_PRDIRTY : (SAFBC Offset: 0x74) (R/W 32) There is a bit in this register for each of the 12 Flash Regions that can be allocated from     the Region Table in the Intel Descriptor structure. Register sets 12 through 16 do not represent     allocated Flash regions, and so they do not have bits in this register. -------- */
#define SAFBC_PRDIRTY_RESETVALUE              _UINT32_(0x00)                                       /*  (SAFBC_PRDIRTY) There is a bit in this register for each of the 12 Flash Regions that can be allocated from     the Region Table in the Intel Descriptor structure. Register sets 12 through 16 do not represent     allocated Flash regions, and so they do not have bits in this register.  Reset Value */

#define SAFBC_PRDIRTY_SAF_0_Pos               _UINT32_(0)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 0 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_0_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_0_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 0 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_0(value)            (SAFBC_PRDIRTY_SAF_0_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_0_Pos)) /* Assigment of value for SAF_0 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_1_Pos               _UINT32_(1)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 1 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_1_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_1_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 1 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_1(value)            (SAFBC_PRDIRTY_SAF_1_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_1_Pos)) /* Assigment of value for SAF_1 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_2_Pos               _UINT32_(2)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 2 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_2_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_2_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 2 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_2(value)            (SAFBC_PRDIRTY_SAF_2_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_2_Pos)) /* Assigment of value for SAF_2 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_3_Pos               _UINT32_(3)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 3 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_3_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_3_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 3 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_3(value)            (SAFBC_PRDIRTY_SAF_3_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_3_Pos)) /* Assigment of value for SAF_3 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_4_Pos               _UINT32_(4)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 4 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_4_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_4_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 4 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_4(value)            (SAFBC_PRDIRTY_SAF_4_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_4_Pos)) /* Assigment of value for SAF_4 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_5_Pos               _UINT32_(5)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 5 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_5_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_5_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 5 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_5(value)            (SAFBC_PRDIRTY_SAF_5_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_5_Pos)) /* Assigment of value for SAF_5 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_6_Pos               _UINT32_(6)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 6 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_6_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_6_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 6 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_6(value)            (SAFBC_PRDIRTY_SAF_6_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_6_Pos)) /* Assigment of value for SAF_6 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_7_Pos               _UINT32_(7)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 7 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_7_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_7_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 7 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_7(value)            (SAFBC_PRDIRTY_SAF_7_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_7_Pos)) /* Assigment of value for SAF_7 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_8_Pos               _UINT32_(8)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 8 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_8_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_8_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 8 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_8(value)            (SAFBC_PRDIRTY_SAF_8_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_8_Pos)) /* Assigment of value for SAF_8 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_9_Pos               _UINT32_(9)                                          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 9 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_9_Msk               (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_9_Pos)           /* (SAFBC_PRDIRTY) Indicates whether contents of Region 9 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_9(value)            (SAFBC_PRDIRTY_SAF_9_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_9_Pos)) /* Assigment of value for SAF_9 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_10_Pos              _UINT32_(10)                                         /* (SAFBC_PRDIRTY) Indicates whether contents of Region 10 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_10_Msk              (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_10_Pos)          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 10 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_10(value)           (SAFBC_PRDIRTY_SAF_10_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_10_Pos)) /* Assigment of value for SAF_10 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_SAF_11_Pos              _UINT32_(11)                                         /* (SAFBC_PRDIRTY) Indicates whether contents of Region 11 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PRDIRTY_SAF_11_Msk              (_UINT32_(0x1) << SAFBC_PRDIRTY_SAF_11_Pos)          /* (SAFBC_PRDIRTY) Indicates whether contents of Region 11 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PRDIRTY_SAF_11(value)           (SAFBC_PRDIRTY_SAF_11_Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF_11_Pos)) /* Assigment of value for SAF_11 in the SAFBC_PRDIRTY register */
#define SAFBC_PRDIRTY_Msk                     _UINT32_(0x00000FFF)                                 /* (SAFBC_PRDIRTY) Register Mask  */

#define SAFBC_PRDIRTY_SAF__Pos                _UINT32_(0)                                          /* (SAFBC_PRDIRTY Position) Indicates whether contents of Region xx have been changed.         x=There has been no Write or Erase performed in this region since this bit was last cleared.         x=A Write or Erase has been performed in this region since this bit was last cleared. */
#define SAFBC_PRDIRTY_SAF__Msk                (_UINT32_(0xFFF) << SAFBC_PRDIRTY_SAF__Pos)          /* (SAFBC_PRDIRTY Mask) SAF_ */
#define SAFBC_PRDIRTY_SAF_(value)             (SAFBC_PRDIRTY_SAF__Msk & (_UINT32_(value) << SAFBC_PRDIRTY_SAF__Pos)) 

/* -------- SAFBC_TAG_MAP0 : (SAFBC Offset: 0x78) (R/W 32) The default values in this register match hard-wired assignments made in the Chipset for eSPI     Tag values 0h through 7h. A default value of 7 indicates a non-existent map entry, for a Tag value     which should never happen. -------- */
#define SAFBC_TAG_MAP0_RESETVALUE             _UINT32_(0x23221100)                                 /*  (SAFBC_TAG_MAP0) The default values in this register match hard-wired assignments made in the Chipset for eSPI     Tag values 0h through 7h. A default value of 7 indicates a non-existent map entry, for a Tag value     which should never happen.  Reset Value */

#define SAFBC_TAG_MAP0_STM_0_Pos              _UINT32_(0)                                          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 0h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP0_STM_0_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP0_STM_0_Pos)          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 0h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP0_STM_0(value)           (SAFBC_TAG_MAP0_STM_0_Msk & (_UINT32_(value) << SAFBC_TAG_MAP0_STM_0_Pos)) /* Assigment of value for STM_0 in the SAFBC_TAG_MAP0 register */
#define SAFBC_TAG_MAP0_STM_1_Pos              _UINT32_(4)                                          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 1h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP0_STM_1_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP0_STM_1_Pos)          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 1h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP0_STM_1(value)           (SAFBC_TAG_MAP0_STM_1_Msk & (_UINT32_(value) << SAFBC_TAG_MAP0_STM_1_Pos)) /* Assigment of value for STM_1 in the SAFBC_TAG_MAP0 register */
#define SAFBC_TAG_MAP0_STM_2_Pos              _UINT32_(8)                                          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 2h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP0_STM_2_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP0_STM_2_Pos)          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 2h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP0_STM_2(value)           (SAFBC_TAG_MAP0_STM_2_Msk & (_UINT32_(value) << SAFBC_TAG_MAP0_STM_2_Pos)) /* Assigment of value for STM_2 in the SAFBC_TAG_MAP0 register */
#define SAFBC_TAG_MAP0_STM_3_Pos              _UINT32_(12)                                         /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 3h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP0_STM_3_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP0_STM_3_Pos)          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 3h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP0_STM_3(value)           (SAFBC_TAG_MAP0_STM_3_Msk & (_UINT32_(value) << SAFBC_TAG_MAP0_STM_3_Pos)) /* Assigment of value for STM_3 in the SAFBC_TAG_MAP0 register */
#define SAFBC_TAG_MAP0_STM_4_Pos              _UINT32_(16)                                         /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 4h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP0_STM_4_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP0_STM_4_Pos)          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 4h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP0_STM_4(value)           (SAFBC_TAG_MAP0_STM_4_Msk & (_UINT32_(value) << SAFBC_TAG_MAP0_STM_4_Pos)) /* Assigment of value for STM_4 in the SAFBC_TAG_MAP0 register */
#define SAFBC_TAG_MAP0_STM_5_Pos              _UINT32_(20)                                         /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 5h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP0_STM_5_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP0_STM_5_Pos)          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 5h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP0_STM_5(value)           (SAFBC_TAG_MAP0_STM_5_Msk & (_UINT32_(value) << SAFBC_TAG_MAP0_STM_5_Pos)) /* Assigment of value for STM_5 in the SAFBC_TAG_MAP0 register */
#define SAFBC_TAG_MAP0_STM_6_Pos              _UINT32_(24)                                         /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 6h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP0_STM_6_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP0_STM_6_Pos)          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 6h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP0_STM_6(value)           (SAFBC_TAG_MAP0_STM_6_Msk & (_UINT32_(value) << SAFBC_TAG_MAP0_STM_6_Pos)) /* Assigment of value for STM_6 in the SAFBC_TAG_MAP0 register */
#define SAFBC_TAG_MAP0_STM_7_Pos              _UINT32_(28)                                         /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 7h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP0_STM_7_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP0_STM_7_Pos)          /* (SAFBC_TAG_MAP0) This bit contains the mapping of the 4-bit eSPI Tag value 7h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP0_STM_7(value)           (SAFBC_TAG_MAP0_STM_7_Msk & (_UINT32_(value) << SAFBC_TAG_MAP0_STM_7_Pos)) /* Assigment of value for STM_7 in the SAFBC_TAG_MAP0 register */
#define SAFBC_TAG_MAP0_Msk                    _UINT32_(0x77777777)                                 /* (SAFBC_TAG_MAP0) Register Mask  */


/* -------- SAFBC_TAG_MAP1 : (SAFBC Offset: 0x7C) (R/W 32) The default values in this register match hard-wired assignments made in the Chipset for eSPI Tag     values 8h through Fh. A default value of 7 indicates a non-existent map entry, for a Tag value which     should never happen. -------- */
#define SAFBC_TAG_MAP1_RESETVALUE             _UINT32_(0x77677767)                                 /*  (SAFBC_TAG_MAP1) The default values in this register match hard-wired assignments made in the Chipset for eSPI Tag     values 8h through Fh. A default value of 7 indicates a non-existent map entry, for a Tag value which     should never happen.  Reset Value */

#define SAFBC_TAG_MAP1_STM_8_Pos              _UINT32_(0)                                          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value 8h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP1_STM_8_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP1_STM_8_Pos)          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value 8h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP1_STM_8(value)           (SAFBC_TAG_MAP1_STM_8_Msk & (_UINT32_(value) << SAFBC_TAG_MAP1_STM_8_Pos)) /* Assigment of value for STM_8 in the SAFBC_TAG_MAP1 register */
#define SAFBC_TAG_MAP1_STM_9_Pos              _UINT32_(4)                                          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value 9h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP1_STM_9_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP1_STM_9_Pos)          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value 9h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP1_STM_9(value)           (SAFBC_TAG_MAP1_STM_9_Msk & (_UINT32_(value) << SAFBC_TAG_MAP1_STM_9_Pos)) /* Assigment of value for STM_9 in the SAFBC_TAG_MAP1 register */
#define SAFBC_TAG_MAP1_STM_A_Pos              _UINT32_(8)                                          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Ah to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP1_STM_A_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP1_STM_A_Pos)          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Ah to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP1_STM_A(value)           (SAFBC_TAG_MAP1_STM_A_Msk & (_UINT32_(value) << SAFBC_TAG_MAP1_STM_A_Pos)) /* Assigment of value for STM_A in the SAFBC_TAG_MAP1 register */
#define SAFBC_TAG_MAP1_STM_B_Pos              _UINT32_(12)                                         /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Bh to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP1_STM_B_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP1_STM_B_Pos)          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Bh to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP1_STM_B(value)           (SAFBC_TAG_MAP1_STM_B_Msk & (_UINT32_(value) << SAFBC_TAG_MAP1_STM_B_Pos)) /* Assigment of value for STM_B in the SAFBC_TAG_MAP1 register */
#define SAFBC_TAG_MAP1_STM_C_Pos              _UINT32_(16)                                         /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Ch to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP1_STM_C_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP1_STM_C_Pos)          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Ch to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP1_STM_C(value)           (SAFBC_TAG_MAP1_STM_C_Msk & (_UINT32_(value) << SAFBC_TAG_MAP1_STM_C_Pos)) /* Assigment of value for STM_C in the SAFBC_TAG_MAP1 register */
#define SAFBC_TAG_MAP1_STM_D_Pos              _UINT32_(20)                                         /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Dh to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP1_STM_D_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP1_STM_D_Pos)          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Dh to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP1_STM_D(value)           (SAFBC_TAG_MAP1_STM_D_Msk & (_UINT32_(value) << SAFBC_TAG_MAP1_STM_D_Pos)) /* Assigment of value for STM_D in the SAFBC_TAG_MAP1 register */
#define SAFBC_TAG_MAP1_STM_E_Pos              _UINT32_(24)                                         /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Eh to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP1_STM_E_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP1_STM_E_Pos)          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Eh to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP1_STM_E(value)           (SAFBC_TAG_MAP1_STM_E_Msk & (_UINT32_(value) << SAFBC_TAG_MAP1_STM_E_Pos)) /* Assigment of value for STM_E in the SAFBC_TAG_MAP1 register */
#define SAFBC_TAG_MAP1_STM_F_Pos              _UINT32_(28)                                         /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Fh to its 3-bit Protection Master         number. Position */
#define SAFBC_TAG_MAP1_STM_F_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP1_STM_F_Pos)          /* (SAFBC_TAG_MAP1) This bit contains the mapping of the 4-bit eSPI Tag value Fh to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAG_MAP1_STM_F(value)           (SAFBC_TAG_MAP1_STM_F_Msk & (_UINT32_(value) << SAFBC_TAG_MAP1_STM_F_Pos)) /* Assigment of value for STM_F in the SAFBC_TAG_MAP1 register */
#define SAFBC_TAG_MAP1_Msk                    _UINT32_(0x77777777)                                 /* (SAFBC_TAG_MAP1) Register Mask  */


/* -------- SAFBC_TAG_MAP2 : (SAFBC Offset: 0x80) (R/W 32) The default value in bits [2:0] of this register matches the hard-wired assignment made in the     Chipset for accesses made by an EC. After ensuring that all three Tag Map Registers [2:0] contain     valid mappings, the STM_LK bit should be set to '1' to lock them, preventing firmware from     re-assigning them later. -------- */
#define SAFBC_TAG_MAP2_RESETVALUE             _UINT32_(0x05)                                       /*  (SAFBC_TAG_MAP2) The default value in bits [2:0] of this register matches the hard-wired assignment made in the     Chipset for accesses made by an EC. After ensuring that all three Tag Map Registers [2:0] contain     valid mappings, the STM_LK bit should be set to '1' to lock them, preventing firmware from     re-assigning them later.  Reset Value */

#define SAFBC_TAG_MAP2_SM_EC_Pos              _UINT32_(0)                                          /* (SAFBC_TAG_MAP2) This bit maps the 3-bit Protection Master number assigned to EC Firmware accesses. Position */
#define SAFBC_TAG_MAP2_SM_EC_Msk              (_UINT32_(0x7) << SAFBC_TAG_MAP2_SM_EC_Pos)          /* (SAFBC_TAG_MAP2) This bit maps the 3-bit Protection Master number assigned to EC Firmware accesses. Mask */
#define SAFBC_TAG_MAP2_SM_EC(value)           (SAFBC_TAG_MAP2_SM_EC_Msk & (_UINT32_(value) << SAFBC_TAG_MAP2_SM_EC_Pos)) /* Assigment of value for SM_EC in the SAFBC_TAG_MAP2 register */
#define SAFBC_TAG_MAP2_STM_LK_Pos             _UINT32_(31)                                         /* (SAFBC_TAG_MAP2) 1 Locks all bits in the Tag Map Registers, including this bit.              0 (Default) keeps all Tag Map Register fields R/W. Position */
#define SAFBC_TAG_MAP2_STM_LK_Msk             (_UINT32_(0x1) << SAFBC_TAG_MAP2_STM_LK_Pos)         /* (SAFBC_TAG_MAP2) 1 Locks all bits in the Tag Map Registers, including this bit.              0 (Default) keeps all Tag Map Register fields R/W. Mask */
#define SAFBC_TAG_MAP2_STM_LK(value)          (SAFBC_TAG_MAP2_STM_LK_Msk & (_UINT32_(value) << SAFBC_TAG_MAP2_STM_LK_Pos)) /* Assigment of value for STM_LK in the SAFBC_TAG_MAP2 register */
#define SAFBC_TAG_MAP2_Msk                    _UINT32_(0x80000007)                                 /* (SAFBC_TAG_MAP2) Register Mask  */


/* -------- SAFBC_POLL_TMOUT : (SAFBC Offset: 0x194) (R/W 32) This is an error timeout value imposed on any consecutive series of Poll-1 commands to a     Flash. The timeout counter starts whenever any new Poll-1 sequence starts, and stops when a     Poll-1 detects Not-BUSY status from the Flash. -------- */
#define SAFBC_POLL_TMOUT_RESETVALUE           _UINT32_(0x00)                                       /*  (SAFBC_POLL_TMOUT) This is an error timeout value imposed on any consecutive series of Poll-1 commands to a     Flash. The timeout counter starts whenever any new Poll-1 sequence starts, and stops when a     Poll-1 detects Not-BUSY status from the Flash.  Reset Value */

#define SAFBC_POLL_TMOUT_TOUT_Pos             _UINT32_(0)                                          /* (SAFBC_POLL_TMOUT) This field provides a polling timeout value in units of the 32KHz clock. Recommended         value is 5 seconds, expressed as 28000h (163,840 decimal) in this field. Position */
#define SAFBC_POLL_TMOUT_TOUT_Msk             (_UINT32_(0x3FFFF) << SAFBC_POLL_TMOUT_TOUT_Pos)     /* (SAFBC_POLL_TMOUT) This field provides a polling timeout value in units of the 32KHz clock. Recommended         value is 5 seconds, expressed as 28000h (163,840 decimal) in this field. Mask */
#define SAFBC_POLL_TMOUT_TOUT(value)          (SAFBC_POLL_TMOUT_TOUT_Msk & (_UINT32_(value) << SAFBC_POLL_TMOUT_TOUT_Pos)) /* Assigment of value for TOUT in the SAFBC_POLL_TMOUT register */
#define SAFBC_POLL_TMOUT_Msk                  _UINT32_(0x0003FFFF)                                 /* (SAFBC_POLL_TMOUT) Register Mask  */


/* -------- SAFBC_POLL_INTRVL : (SAFBC Offset: 0x198) (R/W 32) This register should be kept zero except for diagnostic purposes. Where needed, it can be set     to provide spacing between consecutive Poll-1 operations to limit the amount of traffic. -------- */
#define SAFBC_POLL_INTRVL_RESETVALUE          _UINT32_(0x00)                                       /*  (SAFBC_POLL_INTRVL) This register should be kept zero except for diagnostic purposes. Where needed, it can be set     to provide spacing between consecutive Poll-1 operations to limit the amount of traffic.  Reset Value */

#define SAFBC_POLL_INTRVL_INTRVL_Pos          _UINT32_(0)                                          /* (SAFBC_POLL_INTRVL) This field provides an interval in units of the EC internal clock MCLK. Position */
#define SAFBC_POLL_INTRVL_INTRVL_Msk          (_UINT32_(0xFFFF) << SAFBC_POLL_INTRVL_INTRVL_Pos)   /* (SAFBC_POLL_INTRVL) This field provides an interval in units of the EC internal clock MCLK. Mask */
#define SAFBC_POLL_INTRVL_INTRVL(value)       (SAFBC_POLL_INTRVL_INTRVL_Msk & (_UINT32_(value) << SAFBC_POLL_INTRVL_INTRVL_Pos)) /* Assigment of value for INTRVL in the SAFBC_POLL_INTRVL register */
#define SAFBC_POLL_INTRVL_Msk                 _UINT32_(0x0000FFFF)                                 /* (SAFBC_POLL_INTRVL) Register Mask  */


/* -------- SAFBC_SUSP_RES_INTRVL : (SAFBC Offset: 0x19C) (R/W 32) The value placed in this register provides necessary programmable support to a Flash that is     performing an Erase or a Program operation.  When an Erase or Program is started or Resumed, a     Suspend is held off until this time expires.  While an Erase or Program is in process but     Suspended, a Resume is forced when this time expires, even if Read requests are still pending,     causing the Erase or Program operation to continue, and again inhibiting the next Suspend until     it expires again. -------- */
#define SAFBC_SUSP_RES_INTRVL_RESETVALUE      _UINT32_(0x01)                                       /*  (SAFBC_SUSP_RES_INTRVL) The value placed in this register provides necessary programmable support to a Flash that is     performing an Erase or a Program operation.  When an Erase or Program is started or Resumed, a     Suspend is held off until this time expires.  While an Erase or Program is in process but     Suspended, a Resume is forced when this time expires, even if Read requests are still pending,     causing the Erase or Program operation to continue, and again inhibiting the next Suspend until     it expires again.  Reset Value */

#define SAFBC_SUSP_RES_INTRVL_INTRVL_Pos      _UINT32_(0)                                          /* (SAFBC_SUSP_RES_INTRVL) This field provides an interval value in units of the 32KHz RTC clock. Its value should         be taken from the Flash datasheet parameter that specifies minimum time for an Erase or         Program step to make progress. Position */
#define SAFBC_SUSP_RES_INTRVL_INTRVL_Msk      (_UINT32_(0xFFFF) << SAFBC_SUSP_RES_INTRVL_INTRVL_Pos) /* (SAFBC_SUSP_RES_INTRVL) This field provides an interval value in units of the 32KHz RTC clock. Its value should         be taken from the Flash datasheet parameter that specifies minimum time for an Erase or         Program step to make progress. Mask */
#define SAFBC_SUSP_RES_INTRVL_INTRVL(value)   (SAFBC_SUSP_RES_INTRVL_INTRVL_Msk & (_UINT32_(value) << SAFBC_SUSP_RES_INTRVL_INTRVL_Pos)) /* Assigment of value for INTRVL in the SAFBC_SUSP_RES_INTRVL register */
#define SAFBC_SUSP_RES_INTRVL_Msk             _UINT32_(0x0000FFFF)                                 /* (SAFBC_SUSP_RES_INTRVL) Register Mask  */


/* -------- SAFBC_CONSEC_RD_TMOUT : (SAFBC Offset: 0x1A0) (R/W 32) This register is used to detect when a series of Read transfers has finished. When this time     expires without any new Read request, any suspended Erase or Program operation is given the     Resume command to continue. -------- */
#define SAFBC_CONSEC_RD_TMOUT_RESETVALUE      _UINT32_(0x00)                                       /*  (SAFBC_CONSEC_RD_TMOUT) This register is used to detect when a series of Read transfers has finished. When this time     expires without any new Read request, any suspended Erase or Program operation is given the     Resume command to continue.  Reset Value */

#define SAFBC_CONSEC_RD_TMOUT_RD_TOUT_Pos     _UINT32_(0)                                          /* (SAFBC_CONSEC_RD_TMOUT) This field provides a timeout value in units of the EC internal clock MCLK. This value is         tunable for system performance, but a value at or below 20us is suggested. Position */
#define SAFBC_CONSEC_RD_TMOUT_RD_TOUT_Msk     (_UINT32_(0xFFFFF) << SAFBC_CONSEC_RD_TMOUT_RD_TOUT_Pos) /* (SAFBC_CONSEC_RD_TMOUT) This field provides a timeout value in units of the EC internal clock MCLK. This value is         tunable for system performance, but a value at or below 20us is suggested. Mask */
#define SAFBC_CONSEC_RD_TMOUT_RD_TOUT(value)  (SAFBC_CONSEC_RD_TMOUT_RD_TOUT_Msk & (_UINT32_(value) << SAFBC_CONSEC_RD_TMOUT_RD_TOUT_Pos)) /* Assigment of value for RD_TOUT in the SAFBC_CONSEC_RD_TMOUT register */
#define SAFBC_CONSEC_RD_TMOUT_Msk             _UINT32_(0x000FFFFF)                                 /* (SAFBC_CONSEC_RD_TMOUT) Register Mask  */


/* -------- SAFBC_FC_POLL2_MASK : (SAFBC Offset: 0x1A4) (R/W 32) Upon issuing a Suspend command, a Poll-1 operation is repeated until the Flash is no longer     BUSY, then a Poll-2 operation to determine whether the Flash device is in a Suspended state. -------- */
#define SAFBC_FC_POLL2_MASK_RESETVALUE        _UINT32_(0x00)                                       /*  (SAFBC_FC_POLL2_MASK) Upon issuing a Suspend command, a Poll-1 operation is repeated until the Flash is no longer     BUSY, then a Poll-2 operation to determine whether the Flash device is in a Suspended state.  Reset Value */

#define SAFBC_FC_POLL2_MASK_CS0_POLL2_Pos     _UINT32_(0)                                          /* (SAFBC_FC_POLL2_MASK) A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS0 Flash. Position */
#define SAFBC_FC_POLL2_MASK_CS0_POLL2_Msk     (_UINT32_(0xFFFF) << SAFBC_FC_POLL2_MASK_CS0_POLL2_Pos) /* (SAFBC_FC_POLL2_MASK) A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS0 Flash. Mask */
#define SAFBC_FC_POLL2_MASK_CS0_POLL2(value)  (SAFBC_FC_POLL2_MASK_CS0_POLL2_Msk & (_UINT32_(value) << SAFBC_FC_POLL2_MASK_CS0_POLL2_Pos)) /* Assigment of value for CS0_POLL2 in the SAFBC_FC_POLL2_MASK register */
#define SAFBC_FC_POLL2_MASK_CS1_POLL2_Pos     _UINT32_(16)                                         /* (SAFBC_FC_POLL2_MASK) A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS1 Flash. Position */
#define SAFBC_FC_POLL2_MASK_CS1_POLL2_Msk     (_UINT32_(0xFFFF) << SAFBC_FC_POLL2_MASK_CS1_POLL2_Pos) /* (SAFBC_FC_POLL2_MASK) A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS1 Flash. Mask */
#define SAFBC_FC_POLL2_MASK_CS1_POLL2(value)  (SAFBC_FC_POLL2_MASK_CS1_POLL2_Msk & (_UINT32_(value) << SAFBC_FC_POLL2_MASK_CS1_POLL2_Pos)) /* Assigment of value for CS1_POLL2 in the SAFBC_FC_POLL2_MASK register */
#define SAFBC_FC_POLL2_MASK_Msk               _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_FC_POLL2_MASK) Register Mask  */


/* -------- SAFBC_FC_SPEC_MODE : (SAFBC Offset: 0x1A8) (R/W 32) This register provides special mode control. -------- */
#define SAFBC_FC_SPEC_MODE_RESETVALUE         _UINT32_(0x00)                                       /*  (SAFBC_FC_SPEC_MODE) This register provides special mode control.  Reset Value */

#define SAFBC_FC_SPEC_MODE_DIS_SUSPEND_Pos    _UINT32_(0)                                          /* (SAFBC_FC_SPEC_MODE) A '1' in this field enters DISABLE_SUSPEND mode, which prevents suspending an Erase or         Write in progress. In this mode, Read operations will be held waiting until the Erase or         Write finishes. Position */
#define SAFBC_FC_SPEC_MODE_DIS_SUSPEND_Msk    (_UINT32_(0x1) << SAFBC_FC_SPEC_MODE_DIS_SUSPEND_Pos) /* (SAFBC_FC_SPEC_MODE) A '1' in this field enters DISABLE_SUSPEND mode, which prevents suspending an Erase or         Write in progress. In this mode, Read operations will be held waiting until the Erase or         Write finishes. Mask */
#define SAFBC_FC_SPEC_MODE_DIS_SUSPEND(value) (SAFBC_FC_SPEC_MODE_DIS_SUSPEND_Msk & (_UINT32_(value) << SAFBC_FC_SPEC_MODE_DIS_SUSPEND_Pos)) /* Assigment of value for DIS_SUSPEND in the SAFBC_FC_SPEC_MODE register */
#define SAFBC_FC_SPEC_MODE_Msk                _UINT32_(0x00000001)                                 /* (SAFBC_FC_SPEC_MODE) Register Mask  */


/* -------- SAFBC_SUSP_CHECK_DLY : (SAFBC Offset: 0x1AC) (R/W 32) This register provides a time delay for support of some Flash devices. It holds off the     first Poll-1 check after a Suspend command has been given to the Flash. -------- */
#define SAFBC_SUSP_CHECK_DLY_RESETVALUE       _UINT32_(0x00)                                       /*  (SAFBC_SUSP_CHECK_DLY) This register provides a time delay for support of some Flash devices. It holds off the     first Poll-1 check after a Suspend command has been given to the Flash.  Reset Value */

#define SAFBC_SUSP_CHECK_DLY_DLY_Pos          _UINT32_(0)                                          /* (SAFBC_SUSP_CHECK_DLY) This field provides a delay value in units of the EC internal clock MCLK. This value         should be set to 20us. Position */
#define SAFBC_SUSP_CHECK_DLY_DLY_Msk          (_UINT32_(0xFFFFF) << SAFBC_SUSP_CHECK_DLY_DLY_Pos)  /* (SAFBC_SUSP_CHECK_DLY) This field provides a delay value in units of the EC internal clock MCLK. This value         should be set to 20us. Mask */
#define SAFBC_SUSP_CHECK_DLY_DLY(value)       (SAFBC_SUSP_CHECK_DLY_DLY_Msk & (_UINT32_(value) << SAFBC_SUSP_CHECK_DLY_DLY_Pos)) /* Assigment of value for DLY in the SAFBC_SUSP_CHECK_DLY register */
#define SAFBC_SUSP_CHECK_DLY_Msk              _UINT32_(0x000FFFFF)                                 /* (SAFBC_SUSP_CHECK_DLY) Register Mask  */


/* -------- SAFBC_FC_SPEC_MODE2 : (SAFBC Offset: 0x1B0) (R/W 32) Micron requires a prefix consisting of two command frames (in separate CS# assertions) to     be sent before Mode information will be recognized to enter Continuous Read mode. This     technique is called (Micron XIP) in their datasheets.  The support for these chips requires     setting up this register and setting the corresponding Prefix Enable bit(s) to enable this     handling.  The first command frame of the Prefix sequence will be a single byte consisting of     the Write Enable opcode, taken from the OP_WE opcode field of the appropriate Opcode A register     (Section 7.3.5, on page 113).  The second command frame of the Prefix sequence comes from this     register, consisting of first the PREFIX_OP byte for the corresponding Flash device (CS0/CS1),     and then its PREFIX_DAT byte.  The PREFIX_OP byte will be 81h always, which is documented as     the Micron opcode (WRITE VOLATILE CONFIGURATION REGISTER) The PREFIX_DAT byte contains the data     written to the Micron Flash device's Volatile Configuration Register. It has potential     side-effects beyond just enabling Micron XIP Mode, so it must be constructed very carefully. -------- */
#define SAFBC_FC_SPEC_MODE2_RESETVALUE        _UINT32_(0x00)                                       /*  (SAFBC_FC_SPEC_MODE2) Micron requires a prefix consisting of two command frames (in separate CS# assertions) to     be sent before Mode information will be recognized to enter Continuous Read mode. This     technique is called (Micron XIP) in their datasheets.  The support for these chips requires     setting up this register and setting the corresponding Prefix Enable bit(s) to enable this     handling.  The first command frame of the Prefix sequence will be a single byte consisting of     the Write Enable opcode, taken from the OP_WE opcode field of the appropriate Opcode A register     (Section 7.3.5, on page 113).  The second command frame of the Prefix sequence comes from this     register, consisting of first the PREFIX_OP byte for the corresponding Flash device (CS0/CS1),     and then its PREFIX_DAT byte.  The PREFIX_OP byte will be 81h always, which is documented as     the Micron opcode (WRITE VOLATILE CONFIGURATION REGISTER) The PREFIX_DAT byte contains the data     written to the Micron Flash device's Volatile Configuration Register. It has potential     side-effects beyond just enabling Micron XIP Mode, so it must be constructed very carefully.  Reset Value */

#define SAFBC_FC_SPEC_MODE2_CS0_PRE_OP_Pos    _UINT32_(0)                                          /* (SAFBC_FC_SPEC_MODE2) This field is the Prefix Opcode for Micron XIP mode on CS0. It should be set to 81h,         for Micron parts. Position */
#define SAFBC_FC_SPEC_MODE2_CS0_PRE_OP_Msk    (_UINT32_(0xFF) << SAFBC_FC_SPEC_MODE2_CS0_PRE_OP_Pos) /* (SAFBC_FC_SPEC_MODE2) This field is the Prefix Opcode for Micron XIP mode on CS0. It should be set to 81h,         for Micron parts. Mask */
#define SAFBC_FC_SPEC_MODE2_CS0_PRE_OP(value) (SAFBC_FC_SPEC_MODE2_CS0_PRE_OP_Msk & (_UINT32_(value) << SAFBC_FC_SPEC_MODE2_CS0_PRE_OP_Pos)) /* Assigment of value for CS0_PRE_OP in the SAFBC_FC_SPEC_MODE2 register */
#define SAFBC_FC_SPEC_MODE2_CS0_PRE_DAT_Pos   _UINT32_(8)                                          /* (SAFBC_FC_SPEC_MODE2) This field is the data sent with the CS0_PREFIX_OP command. Position */
#define SAFBC_FC_SPEC_MODE2_CS0_PRE_DAT_Msk   (_UINT32_(0xFF) << SAFBC_FC_SPEC_MODE2_CS0_PRE_DAT_Pos) /* (SAFBC_FC_SPEC_MODE2) This field is the data sent with the CS0_PREFIX_OP command. Mask */
#define SAFBC_FC_SPEC_MODE2_CS0_PRE_DAT(value) (SAFBC_FC_SPEC_MODE2_CS0_PRE_DAT_Msk & (_UINT32_(value) << SAFBC_FC_SPEC_MODE2_CS0_PRE_DAT_Pos)) /* Assigment of value for CS0_PRE_DAT in the SAFBC_FC_SPEC_MODE2 register */
#define SAFBC_FC_SPEC_MODE2_CS1_PRE_OP_Pos    _UINT32_(16)                                         /* (SAFBC_FC_SPEC_MODE2) This field is the Prefix Opcode for Micron XIP mode on CS1. It should be set to 81h,         for Micron parts. Position */
#define SAFBC_FC_SPEC_MODE2_CS1_PRE_OP_Msk    (_UINT32_(0xFF) << SAFBC_FC_SPEC_MODE2_CS1_PRE_OP_Pos) /* (SAFBC_FC_SPEC_MODE2) This field is the Prefix Opcode for Micron XIP mode on CS1. It should be set to 81h,         for Micron parts. Mask */
#define SAFBC_FC_SPEC_MODE2_CS1_PRE_OP(value) (SAFBC_FC_SPEC_MODE2_CS1_PRE_OP_Msk & (_UINT32_(value) << SAFBC_FC_SPEC_MODE2_CS1_PRE_OP_Pos)) /* Assigment of value for CS1_PRE_OP in the SAFBC_FC_SPEC_MODE2 register */
#define SAFBC_FC_SPEC_MODE2_CS1_PRE_DAT_Pos   _UINT32_(24)                                         /* (SAFBC_FC_SPEC_MODE2) This field is the data sent with the CS1_PREFIX_OP command. Position */
#define SAFBC_FC_SPEC_MODE2_CS1_PRE_DAT_Msk   (_UINT32_(0xFF) << SAFBC_FC_SPEC_MODE2_CS1_PRE_DAT_Pos) /* (SAFBC_FC_SPEC_MODE2) This field is the data sent with the CS1_PREFIX_OP command. Mask */
#define SAFBC_FC_SPEC_MODE2_CS1_PRE_DAT(value) (SAFBC_FC_SPEC_MODE2_CS1_PRE_DAT_Msk & (_UINT32_(value) << SAFBC_FC_SPEC_MODE2_CS1_PRE_DAT_Pos)) /* Assigment of value for CS1_PRE_DAT in the SAFBC_FC_SPEC_MODE2 register */
#define SAFBC_FC_SPEC_MODE2_Msk               _UINT32_(0xFFFFFFFF)                                 /* (SAFBC_FC_SPEC_MODE2) Register Mask  */


/** \brief SAFBC register offsets definitions */
#define SAFBC_START_REG_OFST           _UINT32_(0x00)      /* (SAFBC_START) This is Start00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT_REG_OFST           _UINT32_(0x04)      /* (SAFBC_LIMIT) This is Limit00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE_REG_OFST           _UINT32_(0x08)      /* (SAFBC_WRITE) This is Write00 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ_REG_OFST            _UINT32_(0x0C)      /* (SAFBC_READ) This is Read00 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_ECP_CMD_REG_OFST         _UINT32_(0x18)      /* (SAFBC_ECP_CMD) This register defines the command type and length of transfers requested by EC firmware Offset */
#define SAFBC_ECP_FLASH_ADDR_REG_OFST  _UINT32_(0x1C)      /* (SAFBC_ECP_FLASH_ADDR) This register hold the Flash Space address to be accessed by the current command from EC firmware. Offset */
#define SAFBC_ECP_START_REG_OFST       _UINT32_(0x20)      /* (SAFBC_ECP_START) This register contains the Start control for a Flash access requested in the rest of the EC    Portal registers. It triggers the requested transfer. Offset */
#define SAFBC_ECP_BUF_ADDR_REG_OFST    _UINT32_(0x24)      /* (SAFBC_ECP_BUF_ADDR) This register holds a location in the EC's own address space that is to be used as     the SRAM buffer for an EC Flash access. Offset */
#define SAFBC_ECP_STS_REG_OFST         _UINT32_(0x28)      /* (SAFBC_ECP_STS) This register holds the DONE status bit, which indicates when a request is completed     by rising to '1'. It may be used as an interrupt trigger for INTR_FLASH. It may be cleared     at any time after it rises, but must be cleared before issuing the next request. Offset */
#define SAFBC_ECP_IEN_REG_OFST         _UINT32_(0x2C)      /* (SAFBC_ECP_IEN) This register contains the one bit DONE_EN in bit position[0]. This bit enables the DONE bit in     the status register to trigger an interrupt. Offset */
#define SAFBC_FLASH_SIZE_LIM_REG_OFST  _UINT32_(0x30)      /* (SAFBC_FLASH_SIZE_LIM) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. Offset */
#define SAFBC_FLASH_THR_REG_OFST       _UINT32_(0x34)      /* (SAFBC_FLASH_THR) This register declares whether there are two Flash devices, and if so, where the boundary is     between the devices. Offset */
#define SAFBC_FLASH_MISC_CFG_REG_OFST  _UINT32_(0x38)      /* (SAFBC_FLASH_MISC_CFG) Bits[7:6] (PREFIX) declare the need for some Flash devices (notably Micron) to be given an     explicit command to enter Continuous Mode, as opposed to requiring only Mode bits in the first     Read access. Offset */
#define SAFBC_ESPI_ERRINTR_STAT_REG_OFST _UINT32_(0x3C)      /* (SAFBC_ESPI_ERRINTR_STAT) These bits may be individually enabled to trigger interrupts using the corresponding        Interrupt Enable register. Offset */
#define SAFBC_ESPI_MON_STS_REG_OFST    _UINT32_(0x40)      /* (SAFBC_ESPI_MON_STS) These bits individually enable the bits in SAF eSPI Monitor Status Register  to trigger    interrupts to the EC firmware. Offset */
#define SAFBC_EC_BUSY_REG_OFST         _UINT32_(0x44)      /* (SAFBC_EC_BUSY) This register holds the EC_BUSY status bit, which indicates when the EC Portal    is busy performing an access. Offset */
#define SAFBC_CS0_OPA_REG_OFST         _UINT32_(0x4C)      /* (SAFBC_CS0_OPA) There are two Opcode A registers, one associated with each of the Flashes. If the CS1     Flash does not exist, its register can be left in its default state. The four fields in each     register represent the 8-bit Flash opcodes for Write Enable, Suspend, Resume and Read Status     Register. The Status Register referred to is the register inside the Flash which contains the     (BUSY) or (IN PROGRESS) status bit in position 0. Offset */
#define SAFBC_CS0_OPB_REG_OFST         _UINT32_(0x50)      /* (SAFBC_CS0_OPB) There are two Opcode B registers, one associated with each of the Flashes. If the CS1 Flash    does not exist, its register can be left in its default state. The OP_PROGRAM field is mandatory,    and must hold the Page Program opcode for the respective Flash. The Erase size of 4K is mandatory,    and so the OP_ERASE0 field must be initialized to the appropriate opcode for the Flash device.    There is only one bit declaring each Erase size up to the Host System (instead of one per Flash device,    see eSPI Configuration Register 44h), so if there are two Flash devices, each    Erase size over 4K must be declared here only if BOTH Flash devices support it. Offset */
#define SAFBC_CS0_OPC_REG_OFST         _UINT32_(0x54)      /* (SAFBC_CS0_OPC) There are two Opcode C registers, one associated with each of the Flashes. If the CS1 Flash     does not exist, its register can be left in its default state. Two fields (OP) define opcodes,     and two fields (MODE) represent the Mode code values. Mode codes are provided immediately after     the Address in Continuous Read traffic, and are used to keep the Flash device in Continuous     Read Mode. Depending on the Flash device manufacturer, this mode may be documented in their     datasheet as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy     clock. The recommended Mode values given below are selected to be appropriate for any Flash device. Offset */
#define SAFBC_CS0_PFD_REG_OFST         _UINT32_(0x58)      /* (SAFBC_CS0_PFD) There are two Per-Flash Descriptors registers, one associated with each of the Flash devices.     If the CS1 Flash does not exist, its register can be left in its default state. Each 4-bit field     is a pointer which identifies a Timing Descriptor location in the Captive QMSPI block's Timing     Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 Offset */
#define SAFBC_CS1_OPA_REG_OFST         _UINT32_(0x5C)      /* (SAFBC_CS1_OPA) This is the CS1 Opcode A register. \n   If the CS1 Flash does not exist, its register can be left in its default state. The four fields in each register represent the 8-bit Flash\n   opcodes for Write Enable, Suspend, Resume and Read Status Register. The Status Register referred to is the register inside the Flash which\n          contains the BUSY or IN PROGRESS status bit in position 0. Offset */
#define SAFBC_CS1_OPB_REG_OFST         _UINT32_(0x60)      /* (SAFBC_CS1_OPB) This is the CS1 Flash Opcode B register. If the CS1 Flash does not exist, its register can be     left in its default state. The OP_PROGRAM field is mandatory, and must hold the Page Program     opcode for the respective Flash. The Erase size of 4K is mandatory, and so the OP_ERASE0 field     must be initialized to the appropriate opcode for the Flash device. There is only one bit     declaring each Erase size up to the Host System (instead of one per Flash device, see eSPI     Configuration Register 44h), so if there are two Flash devices, each Erase size over 4K must     be declared here only if BOTH Flash devices support it. Offset */
#define SAFBC_CS1_OPC_REG_OFST         _UINT32_(0x64)      /* (SAFBC_CS1_OPC) This is the CS1 Flash device Opcode C register. If the CS1 Flash does not exist, its     register can be left in its default state. Two fields (OP) define opcodes, and two fields     (MODE) represent the Mode code values. Mode codes are provided immediately after the Address     in Continuous Read traffic, and are used to keep the Flash device in Continuous Read Mode.     Depending on the Flash device manufacturer, this mode may be documented in their datasheet     as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy clock.     The recommended Mode values given below are selected to be appropriate for any Flash device. Offset */
#define SAFBC_CS1_PFD_REG_OFST         _UINT32_(0x68)      /* (SAFBC_CS1_PFD) This is the Per-Flash Descriptors register for CS1 Flash . If the CS1 Flash does not exist,     its register can be left in its default state. Each 4-bit field is a pointer which identifies a     Timing Descriptor location in the Captive QMSPI block's Timing Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 Offset */
#define SAFBC_GEND_REG_OFST            _UINT32_(0x6C)      /* (SAFBC_GEND) This is a single register, which accompanies the two Per-Flash Descriptors registers, and     provides Descriptor pointers that are shared by both CS0 and CS1 devices uniformly.     Each 4-bit field is a pointer which identifies a Timing Descriptor location in the Captive     QMSPI block's memory. The EXIT_CONT field (Exit Continuous Mode) points to the single chain     invoked to exit the Flash from Continuous Mode, allowing an Erase or Program command to be     entered. This chain is identical for either Flash device, regardless of its manufacturer, and     simply directs a universal Exit symbol to the appropriate CS0/CS1 device. The POLL1 and POLL2     fields should both point to the same chain. This chain will issue the appropriate opcode for the     operation (Poll1 or Poll2) supplied by the SAF Bridge from the Opcode registers, and will read     back 16 bits of information for use by the SAF Bridge. Offset */
#define SAFBC_PRLOCK_REG_OFST          _UINT32_(0x70)      /* (SAFBC_PRLOCK) There is a bit in this register for each of the 17 Protection Region Register sets. Writing     '1' to a bit locks the associated 4-Register set to Read-Only access, and also locks this bit     itself to a Read-Only '1'. Offset */
#define SAFBC_PRDIRTY_REG_OFST         _UINT32_(0x74)      /* (SAFBC_PRDIRTY) There is a bit in this register for each of the 12 Flash Regions that can be allocated from     the Region Table in the Intel Descriptor structure. Register sets 12 through 16 do not represent     allocated Flash regions, and so they do not have bits in this register. Offset */
#define SAFBC_TAG_MAP0_REG_OFST        _UINT32_(0x78)      /* (SAFBC_TAG_MAP0) The default values in this register match hard-wired assignments made in the Chipset for eSPI     Tag values 0h through 7h. A default value of 7 indicates a non-existent map entry, for a Tag value     which should never happen. Offset */
#define SAFBC_TAG_MAP1_REG_OFST        _UINT32_(0x7C)      /* (SAFBC_TAG_MAP1) The default values in this register match hard-wired assignments made in the Chipset for eSPI Tag     values 8h through Fh. A default value of 7 indicates a non-existent map entry, for a Tag value which     should never happen. Offset */
#define SAFBC_TAG_MAP2_REG_OFST        _UINT32_(0x80)      /* (SAFBC_TAG_MAP2) The default value in bits [2:0] of this register matches the hard-wired assignment made in the     Chipset for accesses made by an EC. After ensuring that all three Tag Map Registers [2:0] contain     valid mappings, the STM_LK bit should be set to '1' to lock them, preventing firmware from     re-assigning them later. Offset */
#define SAFBC_POLL_TMOUT_REG_OFST      _UINT32_(0x194)     /* (SAFBC_POLL_TMOUT) This is an error timeout value imposed on any consecutive series of Poll-1 commands to a     Flash. The timeout counter starts whenever any new Poll-1 sequence starts, and stops when a     Poll-1 detects Not-BUSY status from the Flash. Offset */
#define SAFBC_POLL_INTRVL_REG_OFST     _UINT32_(0x198)     /* (SAFBC_POLL_INTRVL) This register should be kept zero except for diagnostic purposes. Where needed, it can be set     to provide spacing between consecutive Poll-1 operations to limit the amount of traffic. Offset */
#define SAFBC_SUSP_RES_INTRVL_REG_OFST _UINT32_(0x19C)     /* (SAFBC_SUSP_RES_INTRVL) The value placed in this register provides necessary programmable support to a Flash that is     performing an Erase or a Program operation.  When an Erase or Program is started or Resumed, a     Suspend is held off until this time expires.  While an Erase or Program is in process but     Suspended, a Resume is forced when this time expires, even if Read requests are still pending,     causing the Erase or Program operation to continue, and again inhibiting the next Suspend until     it expires again. Offset */
#define SAFBC_CONSEC_RD_TMOUT_REG_OFST _UINT32_(0x1A0)     /* (SAFBC_CONSEC_RD_TMOUT) This register is used to detect when a series of Read transfers has finished. When this time     expires without any new Read request, any suspended Erase or Program operation is given the     Resume command to continue. Offset */
#define SAFBC_FC_POLL2_MASK_REG_OFST   _UINT32_(0x1A4)     /* (SAFBC_FC_POLL2_MASK) Upon issuing a Suspend command, a Poll-1 operation is repeated until the Flash is no longer     BUSY, then a Poll-2 operation to determine whether the Flash device is in a Suspended state. Offset */
#define SAFBC_FC_SPEC_MODE_REG_OFST    _UINT32_(0x1A8)     /* (SAFBC_FC_SPEC_MODE) This register provides special mode control. Offset */
#define SAFBC_SUSP_CHECK_DLY_REG_OFST  _UINT32_(0x1AC)     /* (SAFBC_SUSP_CHECK_DLY) This register provides a time delay for support of some Flash devices. It holds off the     first Poll-1 check after a Suspend command has been given to the Flash. Offset */
#define SAFBC_FC_SPEC_MODE2_REG_OFST   _UINT32_(0x1B0)     /* (SAFBC_FC_SPEC_MODE2) Micron requires a prefix consisting of two command frames (in separate CS# assertions) to     be sent before Mode information will be recognized to enter Continuous Read mode. This     technique is called (Micron XIP) in their datasheets.  The support for these chips requires     setting up this register and setting the corresponding Prefix Enable bit(s) to enable this     handling.  The first command frame of the Prefix sequence will be a single byte consisting of     the Write Enable opcode, taken from the OP_WE opcode field of the appropriate Opcode A register     (Section 7.3.5, on page 113).  The second command frame of the Prefix sequence comes from this     register, consisting of first the PREFIX_OP byte for the corresponding Flash device (CS0/CS1),     and then its PREFIX_DAT byte.  The PREFIX_OP byte will be 81h always, which is documented as     the Micron opcode (WRITE VOLATILE CONFIGURATION REGISTER) The PREFIX_DAT byte contains the data     written to the Micron Flash device's Volatile Configuration Register. It has potential     side-effects beyond just enabling Micron XIP Mode, so it must be constructed very carefully. Offset */

#if !(defined(__ASSEMBLER__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief SAF_PROT register API structure */
typedef struct
{
  __IO  uint32_t                       SAFBC_START;        /**< Offset: 0x00 (R/W  32) This is Start00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  uint32_t                       SAFBC_LIMIT;        /**< Offset: 0x04 (R/W  32) This is Limit00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  uint32_t                       SAFBC_WRITE;        /**< Offset: 0x08 (R/W  32) This is Write00 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  uint32_t                       SAFBC_READ;         /**< Offset: 0x0C (R/W  32) This is Read00 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
} safbc_saf_prot_registers_t;

#define SAFBC_SAF_PROT_NUMBER 17

/** \brief SAFBC register API structure */
typedef struct
{  /* SAF BRIDGE COMPONENT */
  __I   uint8_t                        Reserved1[0x18];
  __IO  uint32_t                       SAFBC_ECP_CMD;      /**< Offset: 0x18 (R/W  32) This register defines the command type and length of transfers requested by EC firmware */
  __IO  uint32_t                       SAFBC_ECP_FLASH_ADDR; /**< Offset: 0x1C (R/W  32) This register hold the Flash Space address to be accessed by the current command from EC firmware. */
  __IO  uint32_t                       SAFBC_ECP_START;    /**< Offset: 0x20 (R/W  32) This register contains the Start control for a Flash access requested in the rest of the EC    Portal registers. It triggers the requested transfer. */
  __IO  uint32_t                       SAFBC_ECP_BUF_ADDR; /**< Offset: 0x24 (R/W  32) This register holds a location in the EC's own address space that is to be used as     the SRAM buffer for an EC Flash access. */
  __IO  uint32_t                       SAFBC_ECP_STS;      /**< Offset: 0x28 (R/W  32) This register holds the DONE status bit, which indicates when a request is completed     by rising to '1'. It may be used as an interrupt trigger for INTR_FLASH. It may be cleared     at any time after it rises, but must be cleared before issuing the next request. */
  __IO  uint32_t                       SAFBC_ECP_IEN;      /**< Offset: 0x2C (R/W  32) This register contains the one bit DONE_EN in bit position[0]. This bit enables the DONE bit in     the status register to trigger an interrupt. */
  __IO  uint32_t                       SAFBC_FLASH_SIZE_LIM; /**< Offset: 0x30 (R/W  32) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. */
  __IO  uint32_t                       SAFBC_FLASH_THR;    /**< Offset: 0x34 (R/W  32) This register declares whether there are two Flash devices, and if so, where the boundary is     between the devices. */
  __IO  uint32_t                       SAFBC_FLASH_MISC_CFG; /**< Offset: 0x38 (R/W  32) Bits[7:6] (PREFIX) declare the need for some Flash devices (notably Micron) to be given an     explicit command to enter Continuous Mode, as opposed to requiring only Mode bits in the first     Read access. */
  __IO  uint32_t                       SAFBC_ESPI_ERRINTR_STAT; /**< Offset: 0x3C (R/W  32) These bits may be individually enabled to trigger interrupts using the corresponding        Interrupt Enable register. */
  __IO  uint32_t                       SAFBC_ESPI_MON_STS; /**< Offset: 0x40 (R/W  32) These bits individually enable the bits in SAF eSPI Monitor Status Register  to trigger    interrupts to the EC firmware. */
  __IO  uint32_t                       SAFBC_EC_BUSY;      /**< Offset: 0x44 (R/W  32) This register holds the EC_BUSY status bit, which indicates when the EC Portal    is busy performing an access. */
  __I   uint8_t                        Reserved2[0x04];
  __IO  uint32_t                       SAFBC_CS0_OPA;      /**< Offset: 0x4C (R/W  32) There are two Opcode A registers, one associated with each of the Flashes. If the CS1     Flash does not exist, its register can be left in its default state. The four fields in each     register represent the 8-bit Flash opcodes for Write Enable, Suspend, Resume and Read Status     Register. The Status Register referred to is the register inside the Flash which contains the     (BUSY) or (IN PROGRESS) status bit in position 0. */
  __IO  uint32_t                       SAFBC_CS0_OPB;      /**< Offset: 0x50 (R/W  32) There are two Opcode B registers, one associated with each of the Flashes. If the CS1 Flash    does not exist, its register can be left in its default state. The OP_PROGRAM field is mandatory,    and must hold the Page Program opcode for the respective Flash. The Erase size of 4K is mandatory,    and so the OP_ERASE0 field must be initialized to the appropriate opcode for the Flash device.    There is only one bit declaring each Erase size up to the Host System (instead of one per Flash device,    see eSPI Configuration Register 44h), so if there are two Flash devices, each    Erase size over 4K must be declared here only if BOTH Flash devices support it. */
  __IO  uint32_t                       SAFBC_CS0_OPC;      /**< Offset: 0x54 (R/W  32) There are two Opcode C registers, one associated with each of the Flashes. If the CS1 Flash     does not exist, its register can be left in its default state. Two fields (OP) define opcodes,     and two fields (MODE) represent the Mode code values. Mode codes are provided immediately after     the Address in Continuous Read traffic, and are used to keep the Flash device in Continuous     Read Mode. Depending on the Flash device manufacturer, this mode may be documented in their     datasheet as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy     clock. The recommended Mode values given below are selected to be appropriate for any Flash device. */
  __IO  uint32_t                       SAFBC_CS0_PFD;      /**< Offset: 0x58 (R/W  32) There are two Per-Flash Descriptors registers, one associated with each of the Flash devices.     If the CS1 Flash does not exist, its register can be left in its default state. Each 4-bit field     is a pointer which identifies a Timing Descriptor location in the Captive QMSPI block's Timing     Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 */
  __IO  uint32_t                       SAFBC_CS1_OPA;      /**< Offset: 0x5C (R/W  32) This is the CS1 Opcode A register. \n   If the CS1 Flash does not exist, its register can be left in its default state. The four fields in each register represent the 8-bit Flash\n   opcodes for Write Enable, Suspend, Resume and Read Status Register. The Status Register referred to is the register inside the Flash which\n          contains the BUSY or IN PROGRESS status bit in position 0. */
  __IO  uint32_t                       SAFBC_CS1_OPB;      /**< Offset: 0x60 (R/W  32) This is the CS1 Flash Opcode B register. If the CS1 Flash does not exist, its register can be     left in its default state. The OP_PROGRAM field is mandatory, and must hold the Page Program     opcode for the respective Flash. The Erase size of 4K is mandatory, and so the OP_ERASE0 field     must be initialized to the appropriate opcode for the Flash device. There is only one bit     declaring each Erase size up to the Host System (instead of one per Flash device, see eSPI     Configuration Register 44h), so if there are two Flash devices, each Erase size over 4K must     be declared here only if BOTH Flash devices support it. */
  __IO  uint32_t                       SAFBC_CS1_OPC;      /**< Offset: 0x64 (R/W  32) This is the CS1 Flash device Opcode C register. If the CS1 Flash does not exist, its     register can be left in its default state. Two fields (OP) define opcodes, and two fields     (MODE) represent the Mode code values. Mode codes are provided immediately after the Address     in Continuous Read traffic, and are used to keep the Flash device in Continuous Read Mode.     Depending on the Flash device manufacturer, this mode may be documented in their datasheet     as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy clock.     The recommended Mode values given below are selected to be appropriate for any Flash device. */
  __IO  uint32_t                       SAFBC_CS1_PFD;      /**< Offset: 0x68 (R/W  32) This is the Per-Flash Descriptors register for CS1 Flash . If the CS1 Flash does not exist,     its register can be left in its default state. Each 4-bit field is a pointer which identifies a     Timing Descriptor location in the Captive QMSPI block's Timing Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 */
  __IO  uint32_t                       SAFBC_GEND;         /**< Offset: 0x6C (R/W  32) This is a single register, which accompanies the two Per-Flash Descriptors registers, and     provides Descriptor pointers that are shared by both CS0 and CS1 devices uniformly.     Each 4-bit field is a pointer which identifies a Timing Descriptor location in the Captive     QMSPI block's memory. The EXIT_CONT field (Exit Continuous Mode) points to the single chain     invoked to exit the Flash from Continuous Mode, allowing an Erase or Program command to be     entered. This chain is identical for either Flash device, regardless of its manufacturer, and     simply directs a universal Exit symbol to the appropriate CS0/CS1 device. The POLL1 and POLL2     fields should both point to the same chain. This chain will issue the appropriate opcode for the     operation (Poll1 or Poll2) supplied by the SAF Bridge from the Opcode registers, and will read     back 16 bits of information for use by the SAF Bridge. */
  __IO  uint32_t                       SAFBC_PRLOCK;       /**< Offset: 0x70 (R/W  32) There is a bit in this register for each of the 17 Protection Region Register sets. Writing     '1' to a bit locks the associated 4-Register set to Read-Only access, and also locks this bit     itself to a Read-Only '1'. */
  __IO  uint32_t                       SAFBC_PRDIRTY;      /**< Offset: 0x74 (R/W  32) There is a bit in this register for each of the 12 Flash Regions that can be allocated from     the Region Table in the Intel Descriptor structure. Register sets 12 through 16 do not represent     allocated Flash regions, and so they do not have bits in this register. */
  __IO  uint32_t                       SAFBC_TAG_MAP0;     /**< Offset: 0x78 (R/W  32) The default values in this register match hard-wired assignments made in the Chipset for eSPI     Tag values 0h through 7h. A default value of 7 indicates a non-existent map entry, for a Tag value     which should never happen. */
  __IO  uint32_t                       SAFBC_TAG_MAP1;     /**< Offset: 0x7C (R/W  32) The default values in this register match hard-wired assignments made in the Chipset for eSPI Tag     values 8h through Fh. A default value of 7 indicates a non-existent map entry, for a Tag value which     should never happen. */
  __IO  uint32_t                       SAFBC_TAG_MAP2;     /**< Offset: 0x80 (R/W  32) The default value in bits [2:0] of this register matches the hard-wired assignment made in the     Chipset for accesses made by an EC. After ensuring that all three Tag Map Registers [2:0] contain     valid mappings, the STM_LK bit should be set to '1' to lock them, preventing firmware from     re-assigning them later. */
        safbc_saf_prot_registers_t     SAF_PROT[SAFBC_SAF_PROT_NUMBER]; /**< Offset: 0x84  */
  __IO  uint32_t                       SAFBC_POLL_TMOUT;   /**< Offset: 0x194 (R/W  32) This is an error timeout value imposed on any consecutive series of Poll-1 commands to a     Flash. The timeout counter starts whenever any new Poll-1 sequence starts, and stops when a     Poll-1 detects Not-BUSY status from the Flash. */
  __IO  uint32_t                       SAFBC_POLL_INTRVL;  /**< Offset: 0x198 (R/W  32) This register should be kept zero except for diagnostic purposes. Where needed, it can be set     to provide spacing between consecutive Poll-1 operations to limit the amount of traffic. */
  __IO  uint32_t                       SAFBC_SUSP_RES_INTRVL; /**< Offset: 0x19C (R/W  32) The value placed in this register provides necessary programmable support to a Flash that is     performing an Erase or a Program operation.  When an Erase or Program is started or Resumed, a     Suspend is held off until this time expires.  While an Erase or Program is in process but     Suspended, a Resume is forced when this time expires, even if Read requests are still pending,     causing the Erase or Program operation to continue, and again inhibiting the next Suspend until     it expires again. */
  __IO  uint32_t                       SAFBC_CONSEC_RD_TMOUT; /**< Offset: 0x1A0 (R/W  32) This register is used to detect when a series of Read transfers has finished. When this time     expires without any new Read request, any suspended Erase or Program operation is given the     Resume command to continue. */
  __IO  uint32_t                       SAFBC_FC_POLL2_MASK; /**< Offset: 0x1A4 (R/W  32) Upon issuing a Suspend command, a Poll-1 operation is repeated until the Flash is no longer     BUSY, then a Poll-2 operation to determine whether the Flash device is in a Suspended state. */
  __IO  uint32_t                       SAFBC_FC_SPEC_MODE; /**< Offset: 0x1A8 (R/W  32) This register provides special mode control. */
  __IO  uint32_t                       SAFBC_SUSP_CHECK_DLY; /**< Offset: 0x1AC (R/W  32) This register provides a time delay for support of some Flash devices. It holds off the     first Poll-1 check after a Suspend command has been given to the Flash. */
  __IO  uint32_t                       SAFBC_FC_SPEC_MODE2; /**< Offset: 0x1B0 (R/W  32) Micron requires a prefix consisting of two command frames (in separate CS# assertions) to     be sent before Mode information will be recognized to enter Continuous Read mode. This     technique is called (Micron XIP) in their datasheets.  The support for these chips requires     setting up this register and setting the corresponding Prefix Enable bit(s) to enable this     handling.  The first command frame of the Prefix sequence will be a single byte consisting of     the Write Enable opcode, taken from the OP_WE opcode field of the appropriate Opcode A register     (Section 7.3.5, on page 113).  The second command frame of the Prefix sequence comes from this     register, consisting of first the PREFIX_OP byte for the corresponding Flash device (CS0/CS1),     and then its PREFIX_DAT byte.  The PREFIX_OP byte will be 81h always, which is documented as     the Micron opcode (WRITE VOLATILE CONFIGURATION REGISTER) The PREFIX_DAT byte contains the data     written to the Micron Flash device's Volatile Configuration Register. It has potential     side-effects beyond just enabling Micron XIP Mode, so it must be constructed very carefully. */
} safbc_registers_t;


#endif /* !(defined(__ASSEMBLER__) || defined(__IAR_SYSTEMS_ASM__)) */
#endif /* _0525SG12_SAFBC_COMPONENT_H_ */
