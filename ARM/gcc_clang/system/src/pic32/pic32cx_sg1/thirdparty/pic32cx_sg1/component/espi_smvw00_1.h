/*
 * Component description for ESPI_SMVW00_1
 *
 * Copyright (c) 2023 Microchip Technology Inc. and its subsidiaries.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* file generated from device description file (ATDF) version 2020-03-24T11:15:30Z */
#ifndef _0525SG12_ESPI_SMVW00_1_COMPONENT_H_
#define _0525SG12_ESPI_SMVW00_1_COMPONENT_H_

/* ************************************************************************** */
/*   SOFTWARE API DEFINITION FOR ESPI_SMVW00_1                                */
/* ************************************************************************** */

/* -------- ESPI_SMVW00_1_SMVW00_DW0 : (ESPI_SMVW00_1 Offset: 0x00) (R/W 32) Slave-to-Master Virtual Wire 0 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW00_DW0_RESETVALUE   _UINT32_(0xC004)                                     /*  (ESPI_SMVW00_1_SMVW00_DW0) Slave-to-Master Virtual Wire 0 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW00_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW00_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW00_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW00_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_IND(value)   (ESPI_SMVW00_1_SMVW00_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW00_DW0 register */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW00_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW00_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW00_DW0 register */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW00_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW00_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW00_DW0 register */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW00_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW00_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW00_DW0 register */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW00_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW00_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW00_DW0 register */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW00_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW00_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW00_DW0 register */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW00_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW00_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW00_DW0 register */
#define ESPI_SMVW00_1_SMVW00_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW00_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW00_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW00_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW00_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW00_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW00_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW00_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW00_DW1 : (ESPI_SMVW00_1 Offset: 0x04) (R/W 32) Slave-to-Master Virtual Wire 0 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW00_DW1_RESETVALUE   _UINT32_(0x1010000)                                  /*  (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master Virtual Wire 0 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW00_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW00_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW00_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW00_DW1 register */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW00_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW00_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW00_DW1 register */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW00_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW00_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW00_DW1 register */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW00_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW00_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW00_DW1 register */
#define ESPI_SMVW00_1_SMVW00_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW00_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW00_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW00_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW00_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW00_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW00_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW00_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW01_DW0 : (ESPI_SMVW00_1 Offset: 0x08) (R/W 32) Slave-to-Master Virtual Wire 1 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW01_DW0_RESETVALUE   _UINT32_(0x05)                                       /*  (ESPI_SMVW00_1_SMVW01_DW0) Slave-to-Master Virtual Wire 1 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW01_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW01_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW01_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_IND(value)   (ESPI_SMVW00_1_SMVW01_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW01_DW0 register */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW01_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW01_DW0 register */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW01_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW01_DW0 register */
#define ESPI_SMVW00_1_SMVW01_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW01_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW01_DW0 register */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE1_Pos  _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE1_Msk  (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE1_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE1(value) (ESPI_SMVW00_1_SMVW01_DW0_CHANGE1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE1_Pos)) /* Assigment of value for CHANGE1 in the ESPI_SMVW00_1_SMVW01_DW0 register */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE2_Pos  _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE2_Msk  (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE2_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE2(value) (ESPI_SMVW00_1_SMVW01_DW0_CHANGE2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE2_Pos)) /* Assigment of value for CHANGE2 in the ESPI_SMVW00_1_SMVW01_DW0 register */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE3_Pos  _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE3_Msk  (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE3_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE3(value) (ESPI_SMVW00_1_SMVW01_DW0_CHANGE3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE3_Pos)) /* Assigment of value for CHANGE3 in the ESPI_SMVW00_1_SMVW01_DW0 register */
#define ESPI_SMVW00_1_SMVW01_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW01_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW01_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW01_DW0 Position) This bit is set to x whenever the value in Bitx in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW01_DW0_CHNG_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW01_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW01_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_CHNG_Pos)) 
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Pos   _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW01_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Msk   (_UINT32_(0x7) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Pos) /* (ESPI_SMVW00_1_SMVW01_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW01_DW1 : (ESPI_SMVW00_1 Offset: 0x0C) (R/W 32) Slave-to-Master Virtual Wire 1 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW01_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master Virtual Wire 1 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW01_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW01_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW01_DW1 register */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW01_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW01_DW1 register */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW01_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW01_DW1 register */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW01_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW01_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW01_DW1 register */
#define ESPI_SMVW00_1_SMVW01_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW01_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW01_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW01_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW01_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW01_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW01_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW01_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW02_DW0 : (ESPI_SMVW00_1 Offset: 0x10) (R/W 32) Slave-to-Master Virtual Wire 2 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW02_DW0_RESETVALUE   _UINT32_(0x7306)                                     /*  (ESPI_SMVW00_1_SMVW02_DW0) Slave-to-Master Virtual Wire 2 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW02_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW02_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW02_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW02_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_IND(value)   (ESPI_SMVW00_1_SMVW02_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW02_DW0 register */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW02_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW02_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW02_DW0 register */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW02_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW02_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW02_DW0 register */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW02_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW02_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW02_DW0 register */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW02_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW02_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW02_DW0 register */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW02_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW02_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW02_DW0 register */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW02_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW02_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW02_DW0 register */
#define ESPI_SMVW00_1_SMVW02_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW02_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW02_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW02_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW02_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW02_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW02_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW02_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW02_DW1 : (ESPI_SMVW00_1 Offset: 0x14) (R/W 32) Slave-to-Master Virtual Wire 2 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW02_DW1_RESETVALUE   _UINT32_(0x10101)                                    /*  (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master Virtual Wire 2 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW02_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW02_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW02_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW02_DW1 register */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW02_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW02_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW02_DW1 register */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW02_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW02_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW02_DW1 register */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW02_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW02_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW02_DW1 register */
#define ESPI_SMVW00_1_SMVW02_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW02_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW02_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW02_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW02_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW02_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW02_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW02_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW03_DW0 : (ESPI_SMVW00_1 Offset: 0x18) (R/W 32) Slave-to-Master Virtual Wire 3 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW03_DW0_RESETVALUE   _UINT32_(0x40)                                       /*  (ESPI_SMVW00_1_SMVW03_DW0) Slave-to-Master Virtual Wire 3 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW03_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW03_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW03_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW03_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_IND(value)   (ESPI_SMVW00_1_SMVW03_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW03_DW0 register */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW03_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW03_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW03_DW0 register */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW03_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW03_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW03_DW0 register */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW03_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW03_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW03_DW0 register */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW03_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW03_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW03_DW0 register */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW03_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW03_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW03_DW0 register */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW03_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW03_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW03_DW0 register */
#define ESPI_SMVW00_1_SMVW03_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW03_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW03_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW03_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW03_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW03_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW03_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW03_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW03_DW1 : (ESPI_SMVW00_1 Offset: 0x1C) (R/W 32) Slave-to-Master Virtual Wire 3 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW03_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master Virtual Wire 3 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW03_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW03_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW03_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW03_DW1 register */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW03_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW03_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW03_DW1 register */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW03_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW03_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW03_DW1 register */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW03_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW03_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW03_DW1 register */
#define ESPI_SMVW00_1_SMVW03_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW03_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW03_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW03_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW03_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW03_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW03_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW03_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW04_DW0 : (ESPI_SMVW00_1 Offset: 0x20) (R/W 32) Slave-to-Master Virtual Wire 4 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW04_DW0_RESETVALUE   _UINT32_(0x45)                                       /*  (ESPI_SMVW00_1_SMVW04_DW0) Slave-to-Master Virtual Wire 4 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW04_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW04_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW04_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW04_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_IND(value)   (ESPI_SMVW00_1_SMVW04_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW04_DW0 register */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW04_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW04_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW04_DW0 register */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW04_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW04_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW04_DW0 register */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW04_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW04_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW04_DW0 register */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW04_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW04_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW04_DW0 register */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW04_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW04_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW04_DW0 register */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW04_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW04_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW04_DW0 register */
#define ESPI_SMVW00_1_SMVW04_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW04_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW04_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW04_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW04_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW04_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW04_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW04_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW04_DW1 : (ESPI_SMVW00_1 Offset: 0x24) (R/W 32) Slave-to-Master Virtual Wire 4 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW04_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master Virtual Wire 4 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW04_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW04_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW04_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW04_DW1 register */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW04_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW04_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW04_DW1 register */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW04_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW04_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW04_DW1 register */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW04_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW04_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW04_DW1 register */
#define ESPI_SMVW00_1_SMVW04_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW04_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW04_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW04_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW04_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW04_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW04_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW04_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW05_DW0 : (ESPI_SMVW00_1 Offset: 0x28) (R/W 32) Slave-to-Master Virtual Wire 5 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW05_DW0_RESETVALUE   _UINT32_(0x46)                                       /*  (ESPI_SMVW00_1_SMVW05_DW0) Slave-to-Master Virtual Wire 5 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW05_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW05_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW05_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW05_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_IND(value)   (ESPI_SMVW00_1_SMVW05_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW05_DW0 register */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW05_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW05_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW05_DW0 register */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW05_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW05_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW05_DW0 register */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW05_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW05_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW05_DW0 register */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW05_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW05_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW05_DW0 register */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW05_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW05_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW05_DW0 register */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW05_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW05_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW05_DW0 register */
#define ESPI_SMVW00_1_SMVW05_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW05_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW05_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW05_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW05_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW05_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW05_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW05_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW05_DW1 : (ESPI_SMVW00_1 Offset: 0x2C) (R/W 32) Slave-to-Master Virtual Wire 5 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW05_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master Virtual Wire 5 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW05_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW05_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW05_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW05_DW1 register */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW05_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW05_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW05_DW1 register */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW05_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW05_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW05_DW1 register */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW05_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW05_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW05_DW1 register */
#define ESPI_SMVW00_1_SMVW05_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW05_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW05_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW05_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW05_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW05_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW05_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW05_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW06_DW0 : (ESPI_SMVW00_1 Offset: 0x30) (R/W 32) Slave-to-Master Virtual Wire 6 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW06_DW0_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW06_DW0) Slave-to-Master Virtual Wire 6 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW06_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW06_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW06_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW06_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_IND(value)   (ESPI_SMVW00_1_SMVW06_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW06_DW0 register */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW06_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW06_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW06_DW0 register */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW06_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW06_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW06_DW0 register */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW06_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW06_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW06_DW0 register */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW06_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW06_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW06_DW0 register */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW06_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW06_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW06_DW0 register */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW06_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW06_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW06_DW0 register */
#define ESPI_SMVW00_1_SMVW06_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW06_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW06_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW06_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW06_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW06_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW06_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW06_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW06_DW1 : (ESPI_SMVW00_1 Offset: 0x34) (R/W 32) Slave-to-Master Virtual Wire 6 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW06_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master Virtual Wire 6 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW06_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW06_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW06_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW06_DW1 register */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW06_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW06_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW06_DW1 register */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW06_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW06_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW06_DW1 register */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW06_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW06_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW06_DW1 register */
#define ESPI_SMVW00_1_SMVW06_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW06_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW06_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW06_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW06_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW06_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW06_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW06_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW07_DW0 : (ESPI_SMVW00_1 Offset: 0x38) (R/W 32) Slave-to-Master Virtual Wire 7 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW07_DW0_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW07_DW0) Slave-to-Master Virtual Wire 7 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW07_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW07_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW07_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW07_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_IND(value)   (ESPI_SMVW00_1_SMVW07_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW07_DW0 register */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW07_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW07_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW07_DW0 register */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW07_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW07_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW07_DW0 register */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW07_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW07_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW07_DW0 register */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW07_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW07_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW07_DW0 register */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW07_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW07_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW07_DW0 register */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW07_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW07_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW07_DW0 register */
#define ESPI_SMVW00_1_SMVW07_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW07_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW07_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW07_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW07_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW07_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW07_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW07_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW07_DW1 : (ESPI_SMVW00_1 Offset: 0x3C) (R/W 32) Slave-to-Master Virtual Wire 7 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW07_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master Virtual Wire 7 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW07_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW07_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW07_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW07_DW1 register */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW07_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW07_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW07_DW1 register */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW07_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW07_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW07_DW1 register */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW07_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW07_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW07_DW1 register */
#define ESPI_SMVW00_1_SMVW07_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW07_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW07_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW07_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW07_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW07_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW07_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW07_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW08_DW0 : (ESPI_SMVW00_1 Offset: 0x40) (R/W 32) Slave-to-Master Virtual Wire 8 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW08_DW0_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW08_DW0) Slave-to-Master Virtual Wire 8 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW08_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW08_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW08_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW08_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_IND(value)   (ESPI_SMVW00_1_SMVW08_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW08_DW0 register */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW08_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW08_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW08_DW0 register */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW08_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW08_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW08_DW0 register */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW08_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW08_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW08_DW0 register */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW08_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW08_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW08_DW0 register */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW08_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW08_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW08_DW0 register */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW08_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW08_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW08_DW0 register */
#define ESPI_SMVW00_1_SMVW08_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW08_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW08_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW08_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW08_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW08_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW08_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW08_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW08_DW1 : (ESPI_SMVW00_1 Offset: 0x44) (R/W 32) Slave-to-Master Virtual Wire 8 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW08_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master Virtual Wire 8 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW08_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW08_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW08_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW08_DW1 register */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW08_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW08_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW08_DW1 register */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW08_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW08_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW08_DW1 register */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW08_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW08_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW08_DW1 register */
#define ESPI_SMVW00_1_SMVW08_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW08_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW08_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW08_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW08_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW08_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW08_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW08_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW09_DW0 : (ESPI_SMVW00_1 Offset: 0x48) (R/W 32) Slave-to-Master Virtual Wire 9 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW09_DW0_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW09_DW0) Slave-to-Master Virtual Wire 9 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW09_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW09_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW09_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW09_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_IND(value)   (ESPI_SMVW00_1_SMVW09_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW09_DW0 register */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW09_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW09_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW09_DW0 register */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW09_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW09_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW09_DW0 register */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW09_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW09_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW09_DW0 register */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW09_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW09_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW09_DW0 register */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW09_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW09_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW09_DW0 register */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW09_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW09_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW09_DW0 register */
#define ESPI_SMVW00_1_SMVW09_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW09_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW09_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW09_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW09_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW09_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW09_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW09_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW09_DW1 : (ESPI_SMVW00_1 Offset: 0x4C) (R/W 32) Slave-to-Master Virtual Wire 9 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW09_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master Virtual Wire 9 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW09_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW09_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW09_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW09_DW1 register */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW09_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW09_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW09_DW1 register */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW09_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW09_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW09_DW1 register */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW09_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW09_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW09_DW1 register */
#define ESPI_SMVW00_1_SMVW09_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW09_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW09_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW09_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW09_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW09_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW09_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW09_DW1_SRC_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW10_DW0 : (ESPI_SMVW00_1 Offset: 0x50) (R/W 32) Slave-to-Master Virtual Wire 10 Register (DWord 0) -------- */
#define ESPI_SMVW00_1_SMVW10_DW0_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW10_DW0) Slave-to-Master Virtual Wire 10 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW10_DW0_IND_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW10_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_IND_Msk      (_UINT32_(0xFF) << ESPI_SMVW00_1_SMVW10_DW0_IND_Pos) /* (ESPI_SMVW00_1_SMVW10_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_IND(value)   (ESPI_SMVW00_1_SMVW10_DW0_IND_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW0_IND_Pos)) /* Assigment of value for IND in the ESPI_SMVW00_1_SMVW10_DW0 register */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Pos _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW10_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Msk (_UINT32_(0x3) << ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Pos) /* (ESPI_SMVW00_1_SMVW10_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Pos)) /* Assigment of value for STOM_SRC in the ESPI_SMVW00_1_SMVW10_DW0 register */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Pos _UINT32_(12)                                         /* (ESPI_SMVW00_1_SMVW10_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Msk (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Pos) /* (ESPI_SMVW00_1_SMVW10_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Pos)) /* Assigment of value for STOM_R_STATE in the ESPI_SMVW00_1_SMVW10_DW0 register */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG0_Pos    _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG0_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW10_DW0_CHNG0_Pos) /* (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG0(value) (ESPI_SMVW00_1_SMVW10_DW0_CHNG0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW0_CHNG0_Pos)) /* Assigment of value for CHNG0 in the ESPI_SMVW00_1_SMVW10_DW0 register */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG1_Pos    _UINT32_(17)                                         /* (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG1_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW10_DW0_CHNG1_Pos) /* (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG1(value) (ESPI_SMVW00_1_SMVW10_DW0_CHNG1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW0_CHNG1_Pos)) /* Assigment of value for CHNG1 in the ESPI_SMVW00_1_SMVW10_DW0 register */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG2_Pos    _UINT32_(18)                                         /* (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG2_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW10_DW0_CHNG2_Pos) /* (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG2(value) (ESPI_SMVW00_1_SMVW10_DW0_CHNG2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW0_CHNG2_Pos)) /* Assigment of value for CHNG2 in the ESPI_SMVW00_1_SMVW10_DW0 register */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG3_Pos    _UINT32_(19)                                         /* (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG3_Msk    (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW10_DW0_CHNG3_Pos) /* (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG3(value) (ESPI_SMVW00_1_SMVW10_DW0_CHNG3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW0_CHNG3_Pos)) /* Assigment of value for CHNG3 in the ESPI_SMVW00_1_SMVW10_DW0 register */
#define ESPI_SMVW00_1_SMVW10_DW0_Msk          _UINT32_(0x000FF3FF)                                 /* (ESPI_SMVW00_1_SMVW10_DW0) Register Mask  */

#define ESPI_SMVW00_1_SMVW10_DW0_CHNG_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW10_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG_Msk     (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW10_DW0_CHNG_Pos) /* (ESPI_SMVW00_1_SMVW10_DW0 Mask) CHNG */
#define ESPI_SMVW00_1_SMVW10_DW0_CHNG(value)  (ESPI_SMVW00_1_SMVW10_DW0_CHNG_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW0_CHNG_Pos)) 

/* -------- ESPI_SMVW00_1_SMVW10_DW1 : (ESPI_SMVW00_1 Offset: 0x54) (R/W 32) Slave-to-Master Virtual Wire 10 Register (DWord 1) -------- */
#define ESPI_SMVW00_1_SMVW10_DW1_RESETVALUE   _UINT32_(0x00)                                       /*  (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master Virtual Wire 10 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW10_DW1_SRC0_Pos     _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC0_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW10_DW1_SRC0_Pos) /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC0(value)  (ESPI_SMVW00_1_SMVW10_DW1_SRC0_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW1_SRC0_Pos)) /* Assigment of value for SRC0 in the ESPI_SMVW00_1_SMVW10_DW1 register */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC1_Pos     _UINT32_(8)                                          /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC1_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW10_DW1_SRC1_Pos) /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC1(value)  (ESPI_SMVW00_1_SMVW10_DW1_SRC1_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW1_SRC1_Pos)) /* Assigment of value for SRC1 in the ESPI_SMVW00_1_SMVW10_DW1 register */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC2_Pos     _UINT32_(16)                                         /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC2_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW10_DW1_SRC2_Pos) /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC2(value)  (ESPI_SMVW00_1_SMVW10_DW1_SRC2_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW1_SRC2_Pos)) /* Assigment of value for SRC2 in the ESPI_SMVW00_1_SMVW10_DW1 register */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC3_Pos     _UINT32_(24)                                         /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC3_Msk     (_UINT32_(0x1) << ESPI_SMVW00_1_SMVW10_DW1_SRC3_Pos) /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC3(value)  (ESPI_SMVW00_1_SMVW10_DW1_SRC3_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW1_SRC3_Pos)) /* Assigment of value for SRC3 in the ESPI_SMVW00_1_SMVW10_DW1 register */
#define ESPI_SMVW00_1_SMVW10_DW1_Msk          _UINT32_(0x01010101)                                 /* (ESPI_SMVW00_1_SMVW10_DW1) Register Mask  */

#define ESPI_SMVW00_1_SMVW10_DW1_SRC_Pos      _UINT32_(0)                                          /* (ESPI_SMVW00_1_SMVW10_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC_Msk      (_UINT32_(0xF) << ESPI_SMVW00_1_SMVW10_DW1_SRC_Pos)  /* (ESPI_SMVW00_1_SMVW10_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW10_DW1_SRC_Msk & (_UINT32_(value) << ESPI_SMVW00_1_SMVW10_DW1_SRC_Pos)) 

/** \brief ESPI_SMVW00_1 register offsets definitions */
#define ESPI_SMVW00_1_SMVW00_DW0_REG_OFST _UINT32_(0x00)      /* (ESPI_SMVW00_1_SMVW00_DW0) Slave-to-Master Virtual Wire 0 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW00_DW1_REG_OFST _UINT32_(0x04)      /* (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master Virtual Wire 0 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW01_DW0_REG_OFST _UINT32_(0x08)      /* (ESPI_SMVW00_1_SMVW01_DW0) Slave-to-Master Virtual Wire 1 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW01_DW1_REG_OFST _UINT32_(0x0C)      /* (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master Virtual Wire 1 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW02_DW0_REG_OFST _UINT32_(0x10)      /* (ESPI_SMVW00_1_SMVW02_DW0) Slave-to-Master Virtual Wire 2 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW02_DW1_REG_OFST _UINT32_(0x14)      /* (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master Virtual Wire 2 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW03_DW0_REG_OFST _UINT32_(0x18)      /* (ESPI_SMVW00_1_SMVW03_DW0) Slave-to-Master Virtual Wire 3 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW03_DW1_REG_OFST _UINT32_(0x1C)      /* (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master Virtual Wire 3 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW04_DW0_REG_OFST _UINT32_(0x20)      /* (ESPI_SMVW00_1_SMVW04_DW0) Slave-to-Master Virtual Wire 4 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW04_DW1_REG_OFST _UINT32_(0x24)      /* (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master Virtual Wire 4 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW05_DW0_REG_OFST _UINT32_(0x28)      /* (ESPI_SMVW00_1_SMVW05_DW0) Slave-to-Master Virtual Wire 5 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW05_DW1_REG_OFST _UINT32_(0x2C)      /* (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master Virtual Wire 5 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW06_DW0_REG_OFST _UINT32_(0x30)      /* (ESPI_SMVW00_1_SMVW06_DW0) Slave-to-Master Virtual Wire 6 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW06_DW1_REG_OFST _UINT32_(0x34)      /* (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master Virtual Wire 6 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW07_DW0_REG_OFST _UINT32_(0x38)      /* (ESPI_SMVW00_1_SMVW07_DW0) Slave-to-Master Virtual Wire 7 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW07_DW1_REG_OFST _UINT32_(0x3C)      /* (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master Virtual Wire 7 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW08_DW0_REG_OFST _UINT32_(0x40)      /* (ESPI_SMVW00_1_SMVW08_DW0) Slave-to-Master Virtual Wire 8 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW08_DW1_REG_OFST _UINT32_(0x44)      /* (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master Virtual Wire 8 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW09_DW0_REG_OFST _UINT32_(0x48)      /* (ESPI_SMVW00_1_SMVW09_DW0) Slave-to-Master Virtual Wire 9 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW09_DW1_REG_OFST _UINT32_(0x4C)      /* (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master Virtual Wire 9 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW10_DW0_REG_OFST _UINT32_(0x50)      /* (ESPI_SMVW00_1_SMVW10_DW0) Slave-to-Master Virtual Wire 10 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW10_DW1_REG_OFST _UINT32_(0x54)      /* (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master Virtual Wire 10 Register (DWord 1) Offset */

#if !(defined(__ASSEMBLER__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief ESPI_SMVW00_1 register API structure */
typedef struct
{  /* The ESPI VW Channel permits the System to emulate a set of wires that interconnect the system Core Logic with the EC */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW00_DW0; /**< Offset: 0x00 (R/W  32) Slave-to-Master Virtual Wire 0 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW00_DW1; /**< Offset: 0x04 (R/W  32) Slave-to-Master Virtual Wire 0 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW01_DW0; /**< Offset: 0x08 (R/W  32) Slave-to-Master Virtual Wire 1 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW01_DW1; /**< Offset: 0x0C (R/W  32) Slave-to-Master Virtual Wire 1 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW02_DW0; /**< Offset: 0x10 (R/W  32) Slave-to-Master Virtual Wire 2 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW02_DW1; /**< Offset: 0x14 (R/W  32) Slave-to-Master Virtual Wire 2 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW03_DW0; /**< Offset: 0x18 (R/W  32) Slave-to-Master Virtual Wire 3 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW03_DW1; /**< Offset: 0x1C (R/W  32) Slave-to-Master Virtual Wire 3 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW04_DW0; /**< Offset: 0x20 (R/W  32) Slave-to-Master Virtual Wire 4 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW04_DW1; /**< Offset: 0x24 (R/W  32) Slave-to-Master Virtual Wire 4 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW05_DW0; /**< Offset: 0x28 (R/W  32) Slave-to-Master Virtual Wire 5 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW05_DW1; /**< Offset: 0x2C (R/W  32) Slave-to-Master Virtual Wire 5 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW06_DW0; /**< Offset: 0x30 (R/W  32) Slave-to-Master Virtual Wire 6 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW06_DW1; /**< Offset: 0x34 (R/W  32) Slave-to-Master Virtual Wire 6 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW07_DW0; /**< Offset: 0x38 (R/W  32) Slave-to-Master Virtual Wire 7 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW07_DW1; /**< Offset: 0x3C (R/W  32) Slave-to-Master Virtual Wire 7 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW08_DW0; /**< Offset: 0x40 (R/W  32) Slave-to-Master Virtual Wire 8 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW08_DW1; /**< Offset: 0x44 (R/W  32) Slave-to-Master Virtual Wire 8 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW09_DW0; /**< Offset: 0x48 (R/W  32) Slave-to-Master Virtual Wire 9 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW09_DW1; /**< Offset: 0x4C (R/W  32) Slave-to-Master Virtual Wire 9 Register (DWord 1) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW10_DW0; /**< Offset: 0x50 (R/W  32) Slave-to-Master Virtual Wire 10 Register (DWord 0) */
  __IO  uint32_t                       ESPI_SMVW00_1_SMVW10_DW1; /**< Offset: 0x54 (R/W  32) Slave-to-Master Virtual Wire 10 Register (DWord 1) */
} espi_smvw00_1_registers_t;


#endif /* !(defined(__ASSEMBLER__) || defined(__IAR_SYSTEMS_ASM__)) */
#endif /* _0525SG12_ESPI_SMVW00_1_COMPONENT_H_ */
